# version: '3.9'

secrets:
  APP_ROOT_PASSWORD:
    external: true
  TRAEFIK_CLIENTID:
    external: true
  TRAEFIK_SECRET:
    external: true
  VERSIO_USERNAME:
    external: true
  VERSIO_PASSWORD:
    external: true

# configs:
# volumes:

networks:
  wan:
    external: true
  lan:
    external: true

services:

  traefik:
    image: "traefik:v3.3.6"
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${APP_PATH}/traefik/conf/traefik-config.yml:/etc/traefik/traefik-config.yml
      - ${APP_PATH}/traefik/data:/app/data
      - ${APP_PATH}/traefik/logs:/app/logs
    networks:
      - wan
      - lan
    secrets:
      - VERSIO_USERNAME
      - VERSIO_PASSWORD
      - TRAEFIK_CLIENTID
      - TRAEFIK_SECRET
    environment:
      DOMAIN_DEV: ${DOMAIN_DEV}
      ENVIRONMENT: ${ENVIRONMENT}
      VERSIO_ENDPOINT: ${VERSIO_ENDPOINT}
      VERSIO_USERNAME_FILE: /run/secrets/VERSIO_USERNAME
      VERSIO_PASSWORD_FILE: /run/secrets/VERSIO_PASSWORD
    command: traefik --configFile=/etc/traefik/traefik-config.yml
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      mode: global
      placement:
        constraints:
          - node.role==manager
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=true
        - traefik.tags=${ENVIRONMENT}
        # Redirection Middleware
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
        # Basic Auth Middleware
        - traefik.http.middlewares.basic-auth.basicauth.users=root:$$apr1$$QWdnNA46$$ERyQkE85h.jRxDlkEFTcU.
        # Keycloak OpenId Plugin Middleware
        - traefik.http.middlewares.openid-auth.plugin.keycloakopenid.KeycloakURL=http://iam.${DOMAIN_DEV}:8080/
        - traefik.http.middlewares.openid-auth.plugin.keycloakopenid.ClientIDFile=/run/secrets/TRAEFIK_CLIENTID
        - traefik.http.middlewares.openid-auth.plugin.keycloakopenid.ClientSecretFile=/run/secrets/TRAEFIK_SECRET
        - traefik.http.middlewares.openid-auth.plugin.keycloakopenid.KeycloakRealm=huybrechts
        - traefik.http.middlewares.openid-auth.plugin.keycloakopenid.Scope=openid profile email
        - traefik.http.middlewares.openid-auth.plugin.keycloakopenid.TokenCookieName=AUTH_TOKEN
        - traefik.http.middlewares.openid-auth.plugin.keycloakopenid.UseAuthHeader=false
        - traefik.http.middlewares.openid-auth.plugin.keycloakopenid.IgnorePathPrefixes=/favicon.ico
        # Traefik dashboard
        - traefik.http.services.traefik.loadbalancer.server.scheme=http
        - traefik.http.services.traefik.loadbalancer.server.port=8080
        - traefik.http.routers.traefik.rule=Host(`proxy.${DOMAIN_DEV}`)
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.entrypoints=websecure
        - traefik.http.routers.traefik.tls.certresolver=${TRAEFIK_RESOLVER}
        - traefik.http.routers.traefik.middlewares=${TRAEFIK_MIDDLEWARES}

  consul:
    image: hashicorp/consul:1.20
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${APP_PATH}/consul/conf:/consul/config
      - ${APP_PATH}/consul/data:/consul/data
    networks:
      - lan
    environment:
      DATACENTER: ${DATACENTER}
      DOMAIN_DEV: ${DOMAIN_DEV}
      ENVIRONMENT: ${ENVIRONMENT}
      HOSTNAMEID: ${HOSTNAMEID}
      CONSUL_BIND_INTERFACE: eth0
    command:
      - consul
      - agent
      - -config-dir=/consul/config
      - -data-dir=/consul/data
      - -bootstrap-expect=${DOCKER_MANAGERS}
      - -datacenter=${DATACENTER}
      - -node=${HOSTNAMEID}
      - -advertise={{ GetPrivateIP }}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=true
        - traefik.tags=${ENVIRONMENT}
        - traefik.http.services.consul.loadbalancer.server.scheme=http
        - traefik.http.services.consul.loadbalancer.server.port=8500
        - traefik.http.routers.consul.rule=Host(`config.${DOMAIN_DEV}`)
        - traefik.http.routers.consul.entrypoints=websecure
        - traefik.http.routers.consul.tls.certresolver=${TRAEFIK_RESOLVER}
        - traefik.http.routers.consul.middlewares=${TRAEFIK_MIDDLEWARES}

  minio:
    image: minio/minio
    volumes:
      - ${APP_PATH_DATA}:/data
      - ${APP_PATH}/minio/logs:/root/.minio/logs
    networks:
      - lan
    secrets:
      - APP_ROOT_PASSWORD
    environment:
      DOMAIN_DEV: ${DOMAIN_DEV}
      ENVIRONMENT: ${ENVIRONMENT}
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/APP_ROOT_PASSWORD
      MINIO_PROMETHEUS_AUTH_TYPE: public
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
        preferences:
          - spread: node.id
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=true
        - traefik.tags=${ENVIRONMENT}
        # MinIO UI Service
        - traefik.http.services.minio-ui.loadbalancer.server.scheme=http
        - traefik.http.services.minio-ui.loadbalancer.server.port=9001
        - traefik.http.routers.minio-ui.rule=Host(`s3.${DOMAIN_DEV}`)
        - traefik.http.routers.minio-ui.entrypoints=websecure
        - traefik.http.routers.minio-ui.tls.certresolver=${TRAEFIK_RESOLVER}
        - traefik.http.routers.minio-ui.service=minio-ui
        - traefik.http.routers.minio-ui.middlewares=${TRAEFIK_MIDDLEWARES}
        # MinIO Data Service
        - traefik.http.services.minio-data.loadbalancer.server.scheme=http
        - traefik.http.services.minio-data.loadbalancer.server.port=9000
        - traefik.http.routers.minio-data.rule=HostRegexp(`{bucket:[a-zA-Z0-9-]+}.s3.${DOMAIN_DEV}`)
        - traefik.http.routers.minio-data.entrypoints=websecure
        - traefik.http.routers.minio-data.tls.certresolver=${TRAEFIK_RESOLVER}
        - traefik.http.routers.minio-data.service=minio-data

  minio-init:
    image: minio/mc
    volumes:
      - ${APP_PATH}/minio/conf/minio-init.sh:/etc/entrypoint.sh
    networks:
      - lan
    secrets:
      - APP_ROOT_PASSWORD
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD_FILE: /run/secrets/APP_ROOT_PASSWORD
    entrypoint: /bin/sh "/etc/entrypoint.sh"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
        preferences:
          - spread: node.id
      restart_policy:
        condition: none # Ensure this runs only once
      labels:
        - traefik.enable=false

  postgres:
    image: postgres
    volumes:
      - ${APP_PATH}/postgres/data:/var/lib/postgresql/data/pgdata
    networks:
      - lan
    secrets:
      - APP_ROOT_PASSWORD
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: xyzdb
      POSTGRES_USER: root
      POSTGRES_PASSWORD_FILE: /run/secrets/APP_ROOT_PASSWORD
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d xyzdb -U root"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
          - node.labels.postgres==true
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=false

  postgres-init:
    image: postgres
    volumes:
      - ${APP_PATH}/postgres/conf/postgres-entry.sh:/usr/local/bin/entrypoint.sh:ro
      - ${APP_PATH}/postgres/conf/postgres-init.sql:/usr/local/bin/postgres-init.sql:ro
    networks:
      - lan
    secrets:
      - APP_ROOT_PASSWORD
    environment:
      POSTGRES_DB: xyzdb
      POSTGRES_URL: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD_FILE: /run/secrets/APP_ROOT_PASSWORD
    entrypoint: /usr/local/bin/entrypoint.sh
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
          - node.labels.postgres==true
      restart_policy:
        condition: none # Ensure this runs only once
      labels:
        - traefik.enable=false

  pgadmin:
    image: dpage/pgadmin4
    volumes:
      - ${APP_PATH}/postgres/admin:/var/lib/pgadmin
    networks:
      - lan
    secrets:
      - APP_ROOT_PASSWORD
    environment:
      DOMAIN_DEV: ${DOMAIN_DEV}
      ENVIRONMENT: ${ENVIRONMENT}
      PGADMIN_LISTEN_PORT: 9080
      PGADMIN_DEFAULT_EMAIL: ${APP_ROOT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD_FILE: /run/secrets/APP_ROOT_PASSWORD
      SCRIPT_NAME: /pgadmin
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9080/pgadmin"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
        preferences:
          - spread: node.id
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=true
        - traefik.tags=${ENVIRONMENT}
        - traefik.http.services.pgadmin.loadbalancer.server.scheme=http
        - traefik.http.services.pgadmin.loadbalancer.server.port=9080
        - traefik.http.routers.pgadmin.rule=Host(`db.${DOMAIN_DEV}`) && PathPrefix(`/pgadmin`)
        - traefik.http.routers.pgadmin.entrypoints=websecure
        - traefik.http.routers.pgadmin.tls.certresolver=${TRAEFIK_RESOLVER}
        - traefik.http.routers.pgadmin.middlewares=${TRAEFIK_MIDDLEWARES}

  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    volumes:
      - ${APP_PATH}/keycloak/conf/keycloak-entry.sh:/usr/local/bin/entrypoint.sh
      - ${APP_PATH}/keycloak/conf/keycloak-realm.json:/tmp/custom-realm.json
    networks:
      - lan
    secrets:
      - APP_ROOT_PASSWORD
    environment:
      DOMAIN_DEV: ${DOMAIN_DEV}
      ENVIRONMENT: ${ENVIRONMENT}
      KC_LOG: console #,file
      KC_LOG_LEVEL: INFO
      #KC_LOG_FILE: /home/keycloak.log
      KC_HTTP_ENABLED: "true"
      KC_HTTPS_ENABLED: "false"
      KC_HOSTNAME: https://iam.${DOMAIN_DEV}
      KC_HOSTNAME_STRICT: "false"
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_HTTP_METRICS_HISTOGRAMS_ENABLED: "true"
      KC_EVENT_METRICS_USER_ENABLED: "true"
      KC_TRACING_ENABLED: "true"
      KC_TRACING_PROPAGATORS: tracecontext,baggage
      KC_TRACING_SAMPLER: always_on
      KC_TRACING_ENDPOINT: http://telemetry:4317
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_DATABASE: xyzdb
      KC_DB_SCHEMA: keycloak
      KC_DB_USERNAME: root
      KC_DB_PASSWORD_FILE: /run/secrets/APP_ROOT_PASSWORD
      KC_BOOTSTRAP_ADMIN_USERNAME: root
      KC_BOOTSTRAP_ADMIN_PASSWORD_FILE: /run/secrets/APP_ROOT_PASSWORD
    entrypoint: /usr/local/bin/entrypoint.sh --proxy-headers forwarded --hostname-debug=true --features=opentelemetry
    healthcheck:
      test: ["CMD", "bash", "-c", "[ $$(/opt/keycloak/bin/kcadm.sh get serverinfo --realm Keycloak --fields '*' --server http://localhost:8080/admin/serverinfo 2>&1 | grep Unauthorized | wc -l ) -eq 1 ]"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
        preferences:
          - spread: node.id
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=true
        - traefik.tags=${ENVIRONMENT}
        - traefik.http.services.keycloak.loadbalancer.server.scheme=http
        - traefik.http.services.keycloak.loadbalancer.server.port=8080
        - traefik.http.routers.keycloak.rule=Host(`iam.${DOMAIN_DEV}`)
        - traefik.http.routers.keycloak.entrypoints=websecure
        - traefik.http.routers.keycloak.tls.certresolver=${TRAEFIK_RESOLVER}
        - traefik.http.routers.keycloak.middlewares=${TRAEFIK_MIDDLEWARES}

  telemetry:
    image: grafana/otel-lgtm
    volumes:
      - ${APP_PATH}/telemetry/conf/otelcol-config.yml:/otel-lgtm/otelcol-config.yaml:ro
      - ${APP_PATH}/telemetry/conf/prometheus.yml:/otel-lgtm/prometheus.yaml:ro
      - ${APP_PATH}/telemetry/conf/tempo-config.yml:/otel-lgtm/tempo-config.yaml:ro
      - ${APP_PATH}/telemetry/conf/loki-config.yml:/otel-lgtm/loki-config.yaml:ro
      - ${APP_PATH}/telemetry/grafana:/data/grafana
      - ${APP_PATH}/telemetry/prometheus:/data/prometheus
      - ${APP_PATH}/telemetry/loki:/data/loki
      - ${APP_PATH}/telemetry/tempo:/data/tempo
    networks:
      - lan
    environment:
      GF_PATHS_DATA: /data/grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
        preferences:
          - spread: node.id
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=true
        - traefik.tags=${ENVIRONMENT}
        - traefik.http.services.telemetry.loadbalancer.server.scheme=http
        - traefik.http.services.telemetry.loadbalancer.server.port=3000
        - traefik.http.routers.telemetry.rule=Host(`logs.${DOMAIN_DEV}`)
        - traefik.http.routers.telemetry.entrypoints=websecure
        - traefik.http.routers.telemetry.tls.certresolver=${TRAEFIK_RESOLVER}
        - traefik.http.routers.telemetry.middlewares=${TRAEFIK_MIDDLEWARES}

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ${APP_PATH}/telemetry/conf/promtail-config.yml:/etc/promtail/promtail-config.yml
      - ${APP_PATH}/telemetry/promtail:/tmp
    networks:
      - lan
    command: -config.file=/etc/promtail/promtail-config.yml
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=false
