# Docker Compose for the test environment
#
# Environment Variables
# =======================================
# =======================================
#
version: '3.9'

services:

  consul:
    image: consul:1.15.4
    container_name: consul
    command:
      - consul
      - agent
      - -dev
      - -data-dir=/consul/data
      - -config-dir=/consul/config
      - -config-file=/consul/config/consul.develop.json
    networks:
      - public
    volumes:
      - consul-conf:/consul/config
      - consul-data:/consul/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 5s

  traefik:
    image: "traefik:v3.1.6"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    networks:
      - public
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-conf/traefik.develop.yml:/etc/traefik/traefik.yml:ro
      - traefik-data:/app/data
      - traefik-logs:/app/logs
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  minio:
    image: "minio/minio:latest"
    container_name: minio
    environment:
      MINIO_ROOT_USER: "admin"
      MINIO_ROOT_PASSWORD: "password"
      MINIO_REGION: "develop"
      MINIO_HTTP2_DISABLE: "on"
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # MinIO Dataservice
      - "9001:9001"  # MinIO Console (optional)
    networks:
      - public
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 5s

  minio-init:
    image: minio/mc
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: "admin"
      MINIO_ROOT_PASSWORD: "password"
    entrypoint: >
      /bin/sh -c "
        # Function to create bucket if it doesn't exist and set the read-write policy
        create_bucket_if_not_exists() {
          local bucket_name=$1
          echo 'Checking if bucket' \$bucket_name 'exists...';
          if ! mc ls myminio/\$bucket_name > /dev/null 2>&1; then
              echo 'Creating bucket' \$bucket_name '...';
              mc mb myminio/\$bucket_name || { echo 'Failed to create bucket'; exit 1; }
              echo 'Created bucket' \$bucket_name
          else
              echo 'Bucket' \$bucket_name 'already exists'
          fi &&
          
          echo 'Setting read-write policy for' \$bucket_name 'bucket...';
          mc anonymous set public myminio/\$bucket_name || { echo 'Failed to set policy'; exit 1; }
          echo 'Set read-write policy for' \$bucket_name 'bucket'
        }

        # Main script execution
        echo 'Setting MinIO alias...';
        export MINIO_ROOT_USER=\"$MINIO_ROOT_USER\"
        export MINIO_ROOT_PASSWORD=\"$MINIO_ROOT_PASSWORD\"
        echo \$MINIO_ROOT_USER;
        echo \$MINIO_ROOT_PASSWORD;
        mc alias set myminio http://minio:9000 \$MINIO_ROOT_USER \$MINIO_ROOT_PASSWORD &&

        # Create and configure buckets
        create_bucket_if_not_exists thanos;
        create_bucket_if_not_exists loki;
      "
    networks:
      - public

  postgres:
    image: postgres
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: xyzdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    networks:
      - private
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d xyzdb -U admin"]
      interval: 1s
      timeout: 5s
      retries: 10
      start_period: 5s

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_LISTEN_PORT: 9080
      PGADMIN_DEFAULT_EMAIL: admin@localhost.com
      PGADMIN_DEFAULT_PASSWORD: password
      SCRIPT_NAME: /pgadmin
    networks:
      - public
      - private
    volumes:
      - postgres-admin:/var/lib/pgadmin
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:9080/pgadmin"]
      interval: 15s
      retries: 3
      timeout: 10s
      start_period: 10s

volumes:

  consul-conf:
    driver: local
    driver_opts:
      type: none
      device: ../.app/consul/conf
      o: bind
  consul-data:
    driver: local
    driver_opts:
      type: none
      device: ../.app/consul/data
      o: bind

  traefik-conf:
    driver: local
    driver_opts:
      type: none
      device: /app/traefik/conf
      o: bind
  traefik-data:
    driver: local
    driver_opts:
      type: none
      device: /app/traefik/data
      o: bind
  traefik-logs:
    driver: local
    driver_opts:
      type: none
      device: /app/traefik/logs
      o: bind

  minio-data:
    driver: local
    driver_opts:
      type: none
      device: /app/minio/data
      o: bind

  postgres-admin:
    driver: local
    driver_opts:
      type: none
      device: /app/postgres/admin
      o: bind
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: /app/postgres/data
      o: bind

networks:
  public:
    driver: bridge
  private:
    driver: bridge

#secrets:

#configs:
