<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add Defaults" xml:space="preserve">
    <value>Add Defaults</value>
  </data>
  <data name="Add New" xml:space="preserve">
    <value>Add New</value>
  </data>
  <data name="Categories" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="CategoryCreateInfo" xml:space="preserve">
    <value>Add a new category and, optionally, a subcategory to the system. Provide relevant details such as description and classification type.</value>
  </data>
  <data name="CategoryCreateTitle" xml:space="preserve">
    <value>Create New Category</value>
  </data>
  <data name="CategoryDeleteInfo" xml:space="preserve">
    <value>Confirm the deletion of the selected category or subcategory. This action cannot be undone.</value>
  </data>
  <data name="CategoryDeleteTitle" xml:space="preserve">
    <value>Delete Category</value>
  </data>
  <data name="CategoryEditInfo" xml:space="preserve">
    <value>Modify the details of an existing category or subcategory. Update the classification type, name, and description as needed.</value>
  </data>
  <data name="CategoryEditTitle" xml:space="preserve">
    <value>Edit Category</value>
  </data>
  <data name="CategoryImportInfo" xml:space="preserve">
    <value>Import categories and subcategories from predefined templates. Quickly add multiple categories to the system by selecting from available examples.</value>
  </data>
  <data name="CategoryImportTitle" xml:space="preserve">
    <value>Import Categories</value>
  </data>
  <data name="CategoryIndexInfo" xml:space="preserve">
    <value>View and manage the categories and subcategories for different objects in the system.</value>
  </data>
  <data name="CategoryIndexTitle" xml:space="preserve">
    <value>Manage Categories and Subcategories</value>
  </data>
  <data name="CategoryNoResults" xml:space="preserve">
    <value>No results found</value>
  </data>
  <data name="Clear Filter" xml:space="preserve">
    <value>Clear Filter</value>
  </data>
  <data name="Countries" xml:space="preserve">
    <value>Landen</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Land</value>
  </data>
  <data name="CountryCreateInfo" xml:space="preserve">
    <value>Add a new country to the system by specifying its details. This will make the country available for selection across different contexts.</value>
  </data>
  <data name="CountryCreateTitle" xml:space="preserve">
    <value>Add New Country</value>
  </data>
  <data name="CountryDeleteInfo" xml:space="preserve">
    <value>Confirm the deletion of this country. Once deleted, the country will no longer be available for selection in any context.</value>
  </data>
  <data name="CountryDeleteTitle" xml:space="preserve">
    <value>Delete Country</value>
  </data>
  <data name="CountryEditInfo" xml:space="preserve">
    <value>Update the details of an existing country to ensure it meets the current needs and preferences of your organization.</value>
  </data>
  <data name="CountryEditTitle" xml:space="preserve">
    <value>Edit Country</value>
  </data>
  <data name="CountryImportInfo" xml:space="preserve">
    <value>Choose countries from a preexisting list based on ISO codes and import them into the system. This ensures the use of standardized country codes for consistency and accuracy.</value>
  </data>
  <data name="CountryImportTitle" xml:space="preserve">
    <value>Import Countries from ISO List</value>
  </data>
  <data name="CountryIndexInfo" xml:space="preserve">
    <value>View and manage the list of countries available in the system. You can add, edit, or delete countries to ensure the appropriate options are available for various applications.</value>
  </data>
  <data name="CountryIndexTitle" xml:space="preserve">
    <value>Manage Countries</value>
  </data>
  <data name="Currencies" xml:space="preserve">
    <value>Currencies</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="CurrencyCreateInfo" xml:space="preserve">
    <value>Use this page to add a new currency to the system. You need to specify the currency's ISO code, name, symbol, and other relevant details. This information will help in standardizing transactions across different regions and ensuring accurate currency conversions.</value>
  </data>
  <data name="CurrencyCreateTitle" xml:space="preserve">
    <value>Add a New Currency</value>
  </data>
  <data name="CurrencyDeleteInfo" xml:space="preserve">
    <value>This page allows you to delete a currency from the system. Before proceeding, make sure the currency is not currently in use in any active transactions or financial records. Deleting a currency is permanent and cannot be undone.</value>
  </data>
  <data name="CurrencyDeleteTitle" xml:space="preserve">
    <value>Remove a Currency</value>
  </data>
  <data name="CurrencyEditInfo" xml:space="preserve">
    <value>On this page, you can modify the details of an existing currency in the system. Update information such as the currency's name, ISO code, symbol, or conversion rate. Ensure that all fields are correctly filled to maintain data consistency and accuracy.</value>
  </data>
  <data name="CurrencyEditTitle" xml:space="preserve">
    <value>Update Currency Details</value>
  </data>
  <data name="CurrencyImportInfo" xml:space="preserve">
    <value>Use this page to import currencies into the system from a preexisting list based on ISO codes. This functionality is designed to streamline the process of adding standardized currencies, ensuring that all entries conform to international standards. Select the desired currencies from the list to add them to your system efficiently.</value>
  </data>
  <data name="CurrencyImportTitle" xml:space="preserve">
    <value>Import Currencies from Predefined ISO List</value>
  </data>
  <data name="CurrencyIndexInfo" xml:space="preserve">
    <value>This page displays a comprehensive list of all currencies currently available in the system. From here, you can view details of each currency, such as their names, ISO codes, and conversion rates. Use the available options to add new currencies, edit existing ones, or delete currencies that are no longer needed.</value>
  </data>
  <data name="CurrencyIndexTitle" xml:space="preserve">
    <value>Manage Currencies</value>
  </data>
  <data name="Import" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LanguageCreateInfo" xml:space="preserve">
    <value>Add a new language to the system by specifying its code, display name, and any other relevant settings. This allows for customized language options to be available across different contexts like countries and projects.</value>
  </data>
  <data name="LanguageCreateTitle" xml:space="preserve">
    <value>Add New Language</value>
  </data>
  <data name="LanguageDeleteInfo" xml:space="preserve">
    <value>Update the details of an existing language to ensure it meets the current needs and preferences of your organization.</value>
  </data>
  <data name="LanguageDeleteTitle" xml:space="preserve">
    <value>Delete Language</value>
  </data>
  <data name="LanguageEditInfo" xml:space="preserve">
    <value>Confirm the deletion of this language. Once deleted, the language will no longer be available for selection in any context.</value>
  </data>
  <data name="LanguageEditTitle" xml:space="preserve">
    <value>Edit Language</value>
  </data>
  <data name="LanguageImportInfo" xml:space="preserve">
    <value>Select languages from a preexisting list based on ISO codes and import them into the system. This feature allows for easy and standardized language management.</value>
  </data>
  <data name="LanguageImportTitle" xml:space="preserve">
    <value>Import Languages from ISO List</value>
  </data>
  <data name="LanguageIndexInfo" xml:space="preserve">
    <value>View and manage the list of available languages for selection in various contexts such as countries, projects, and other entities. You can add, edit, or remove languages to ensure the system meets your organization's language needs.</value>
  </data>
  <data name="LanguageIndexTitle" xml:space="preserve">
    <value>Manage Languages</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="MainInfo" xml:space="preserve">
    <value>Please select one of the options in the menu</value>
  </data>
  <data name="MainTitle" xml:space="preserve">
    <value>Setup</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NoResults" xml:space="preserve">
    <value>No results found</value>
  </data>
  <data name="NoSerie" xml:space="preserve">
    <value>No. Serie</value>
  </data>
  <data name="NoSerieCreateInfo" xml:space="preserve">
    <value>Use this page to define a new number series. You can specify the type, format, and maximum counter for the series.Dynamic String Formatter for Patterns with Date and Number Padding

This function allows you to dynamically generate strings based on a customizable pattern. It replaces placeholders for the current year ({YY}), month ({MM}), and sequences of hash symbols (#) with a padded number. The number is formatted according to the length of the # sequence, making it flexible for different padding requirements. This is useful for creating IDs, version numbers, or custom formats with dynamic date and number components.

Features:

    Replace {YY} and {MM} with the current year and month.
    Automatically detect and replace any sequence of # with a number, padded to the correct length.
    Flexible for various patterns, making it highly customizable for different use cases.</value>
  </data>
  <data name="NoSerieCreateTitle" xml:space="preserve">
    <value>Create New Number Series</value>
  </data>
  <data name="NoSerieDeleteInfo" xml:space="preserve">
    <value>Confirm the deletion of a number series. This action is irreversible and will remove the series from the system.</value>
  </data>
  <data name="NoSerieDeleteTitle" xml:space="preserve">
    <value>Delete Number Series</value>
  </data>
  <data name="NoSerieEditInfo" xml:space="preserve">
    <value>Modify the details of an existing number series, including its format, counter, and type values. Dynamic String Formatter for Patterns with Date and Number Padding

This function allows you to dynamically generate strings based on a customizable pattern. It replaces placeholders for the current year ({YY}), month ({MM}), and sequences of hash symbols (#) with a padded number. The number is formatted according to the length of the # sequence, making it flexible for different padding requirements. This is useful for creating IDs, version numbers, or custom formats with dynamic date and number components.

Features:

    Replace {YY} and {MM} with the current year and month.
    Automatically detect and replace any sequence of # with a number, padded to the correct length.
    Flexible for various patterns, making it highly customizable for different use cases.</value>
  </data>
  <data name="NoSerieEditTitle" xml:space="preserve">
    <value>Edit Number Series</value>
  </data>
  <data name="NoSerieImportInfo" xml:space="preserve">
    <value>Use this page to import number series from an external file. Ensure the format is correct to avoid errors during import.</value>
  </data>
  <data name="NoSerieImportTitle" xml:space="preserve">
    <value>Import Number Series</value>
  </data>
  <data name="NoSerieIndexInfo" xml:space="preserve">
    <value>This page displays a list of all available number series. You can view, create, edit, or delete number series for various entities.</value>
  </data>
  <data name="NoSerieIndexTitle" xml:space="preserve">
    <value>Number Series Overview</value>
  </data>
  <data name="NoSerieNoResults" xml:space="preserve">
    <value>No results found</value>
  </data>
  <data name="NoSeries" xml:space="preserve">
    <value>No. Series</value>
  </data>
  <data name="Previous" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Search..." xml:space="preserve">
    <value>Search...</value>
  </data>
  <data name="Setup" xml:space="preserve">
    <value>Setup</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="StateCreateInfo" xml:space="preserve">
    <value>Use this form to create a new state. Provide the necessary details, including the object type, state type, name, description, and sequence order. This will allow you to manage and organize the states within your platform.</value>
  </data>
  <data name="StateCreateTitle" xml:space="preserve">
    <value>Add New State</value>
  </data>
  <data name="StateDeleteInfo" xml:space="preserve">
    <value>Are you sure you want to delete this state? This action is irreversible and will remove the state from the system. Make sure that the state is no longer needed before proceeding.</value>
  </data>
  <data name="StateDeleteTitle" xml:space="preserve">
    <value>Delete State</value>
  </data>
  <data name="StateEditInfo" xml:space="preserve">
    <value>Use this form to edit the details of an existing state. You can update the object type, state type, name, description, and sequence order. Ensure all changes are accurate before saving.</value>
  </data>
  <data name="StateEditTitle" xml:space="preserve">
    <value>Edit State</value>
  </data>
  <data name="StateImportInfo" xml:space="preserve">
    <value>Use this page to import states from a predefined list or external source. This functionality allows you to quickly integrate multiple states into the system, ensuring consistency and efficiency.</value>
  </data>
  <data name="StateImportTitle" xml:space="preserve">
    <value>Import States</value>
  </data>
  <data name="StateIndexInfo" xml:space="preserve">
    <value>This page provides an overview of all custom states available for various objects such as projects, constraints, and requirements. You can view the list of states, their descriptions, and their current status.</value>
  </data>
  <data name="StateIndexTitle" xml:space="preserve">
    <value>State Management</value>
  </data>
  <data name="StateNoResults" xml:space="preserve">
    <value>No states found</value>
  </data>
  <data name="States" xml:space="preserve">
    <value>States</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="TypeCreateInfo" xml:space="preserve">
    <value>Add a new setup type to the system. Provide details such as the classification type and description.</value>
  </data>
  <data name="TypeCreateTitle" xml:space="preserve">
    <value>Create New Setup Type</value>
  </data>
  <data name="TypeDeleteInfo" xml:space="preserve">
    <value>Confirm the deletion of the selected setup type. This action cannot be undone.</value>
  </data>
  <data name="TypeDeleteTitle" xml:space="preserve">
    <value>Delete Setup Type</value>
  </data>
  <data name="TypeEditInfo" xml:space="preserve">
    <value>Modify the details of an existing setup type. Adjust the classification type, name, and description as needed.</value>
  </data>
  <data name="TypeEditTitle" xml:space="preserve">
    <value>Edit Setup Type</value>
  </data>
  <data name="TypeImportInfo" xml:space="preserve">
    <value>Import setup types from pre-defined examples. Quickly add multiple setup types to the system by selecting from available templates.</value>
  </data>
  <data name="TypeImportTitle" xml:space="preserve">
    <value>Import Setup Types</value>
  </data>
  <data name="TypeIndexInfo" xml:space="preserve">
    <value>View and manage different setup types, such as project types, kinds, or other classifications used within the system.</value>
  </data>
  <data name="TypeIndexTitle" xml:space="preserve">
    <value>Manage Setup Types</value>
  </data>
  <data name="TypeNoResults" xml:space="preserve">
    <value>No results found</value>
  </data>
  <data name="Types" xml:space="preserve">
    <value>Types</value>
  </data>
  <data name="UnitCreateInfo" xml:space="preserve">
    <value>se this form to create a new unit of measurement. Ensure all fields are correctly filled out to define the unit’s attributes, including its type, name, and conversion factor.</value>
  </data>
  <data name="UnitCreateTitle" xml:space="preserve">
    <value>Create system unit</value>
  </data>
  <data name="UnitDeleteInfo" xml:space="preserve">
    <value>Are you sure you want to delete this unit of measurement? This action cannot be undone. Ensure that this unit is not in use before proceeding.</value>
  </data>
  <data name="UnitDeleteTitle" xml:space="preserve">
    <value>Delete system unit</value>
  </data>
  <data name="UnitEditInfo" xml:space="preserve">
    <value>Modify the details of this unit of measurement. Ensure the changes accurately reflect the intended attributes of the unit, including its type, name, and conversion factor.</value>
  </data>
  <data name="UnitEditTitle" xml:space="preserve">
    <value>Edit system unit</value>
  </data>
  <data name="UnitImportInfo" xml:space="preserve">
    <value>Select and import units from a preexisting list based on ISO codes. This allows you to quickly and accurately add standardized units to the system.</value>
  </data>
  <data name="UnitImportTitle" xml:space="preserve">
    <value>Import Units from ISO List</value>
  </data>
  <data name="UnitIndexInfo" xml:space="preserve">
    <value>This page displays all the units of measurement currently available. You can view details, create new units, or edit and delete existing ones.</value>
  </data>
  <data name="UnitIndexTitle" xml:space="preserve">
    <value>System units</value>
  </data>
</root>