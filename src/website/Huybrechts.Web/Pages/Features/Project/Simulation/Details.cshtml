@page
@inject IStringLocalizer<Localization> SL
@model Huybrechts.Web.Pages.Features.Project.Simulation.DetailsModel
@{
    ViewData["CardTitle"] = Model.Data.ProjectInfoName + " | " + SL["SimulationDetailsTitle"];
}

<partial name="_StatusResult" for="StatusMessage" />
<p class="text-info">
    @SL["SimulationDetailsInfo"]
</p>

<div class="row">
    <div class="col-md-6">
        <div class="form-floating mb-3">
            <input type="hidden" asp-for="Data.ProjectInfoId" />
            <input asp-for="Data.ProjectInfoName" class="form-control" disabled/>
            <label asp-for="Data.ProjectInfoName" class="form-label"></label>
        </div>
        <div class="form-floating mb-3">
            <input asp-for="Data.CreatedDT" class="form-control border-info" required disabled />
            <label asp-for="Data.CreatedDT" class="form-label"></label>
        </div>
        <div class="form-floating mb-3">
            <input asp-for="Data.Name" class="form-control border-info" disabled />
            <label asp-for="Data.Name" class="form-label"></label>
        </div>
        <div class="form-floating mb-3">
            <input asp-for="Data.Description" class="form-control border-info" disabled />
            <label asp-for="Data.Description" class="form-label"></label>
        </div>
        <div class="form-floating mb-3">
            <a class="w-30 btn btn-lg btn-secondary" asp-page="Index" asp-route-ProjectInfoId="@Model.Data.ProjectInfoId"><i class="bi bi-arrow-left-circle-fill"></i></a>
            <a class="w-30 btn btn-lg btn-danger" asp-page="Details" asp-page-handler="Calculate" asp-route-id="@Model.Data.Id"><i class="bi bi-calculator"></i></a>
            <button id="download-xlsx" class="btn btn-lg btn-info">
                <i class="bi bi-file-earmark-excel"></i>
                <span class="vr"></span>
                Download XLSX
            </button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="table-responsive">
            <table id="table" class="table table-striped">
            </table>
        </div>
    </div>
</div>

@section Breadcrumb {
    <li class="breadcrumb-item">@Model.Data.ProjectInfoName</li>
    <li class="breadcrumb-item"><a asp-page="/Features/Project/Simulation/Index" asp-route-ProjectInfoId="@Model.Data.ProjectInfoId">@SL["Simulations"]</a></li>
}

@section Links {
    
}

@section Scripts {
    <script src="/lib/tabulator/js/tabulator.min.js"></script>
    <script type="text/javascript" src="https://oss.sheetjs.com/sheetjs/xlsx.full.min.js"></script>
    <script>
        var table;

        function loadTabulatorTheme() {
            let link = document.createElement('link');
            link.rel = 'stylesheet';
            // Check for user's system theme preference
            //if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            if (document.documentElement.getAttribute('data-bs-theme') == 'dark') {
                link.href = '/lib/tabulator/css/tabulator_midnight.min.css';
            } else {
                link.href = '/lib/tabulator/css/tabulator.min.css';
            }
            document.head.appendChild(link);
        }

        // Call the function to load the correct theme
        loadTabulatorTheme();

        function getUrl() {
            var pathParts = window.location.pathname.split('/');
            var tenant = pathParts[1];
            return `/${tenant}/Features/Project/Simulation`;
        }

        function getSelectedRow() {
            var selectedRow = $('#table').tabulator("getSelectedRows"); // Use Tabulator's API to get selected rows
            if (selectedRow.length === 0) {
                alert('Please select a row first.');
                return null; // Return null if no row is selected
            }
            return selectedRow[0]; // Return the first selected row
        }

        function loadTable() {
            table = new Tabulator("#table", {
                //layout: "fitColumns",
                selectableRows: 1,
                columns: [
                    { title: "ID", field: "id", sorter: "number", visible: false },  // Hidden column for ID
                    { title: "Component", field: "projectComponent.name", sorter: "string" },
                    { title: "SKU", field: "platformRate.skuName", sorter: "string" },
                    { title: "Meter Name", field: "platformRate.meterName", sorter: "string" },
                    { title: "Unit of Measure", field: "platformRate.unitOfMeasure", sorter: "string" },
                    { title: "Quantity", field: "quantity", sorter: "number", hozAlign: "right" },
                    { title: "Retail Price", field: "retailPrice", sorter: "number", hozAlign: "right" },
                    { title: "Retail Cost", field: "retailCost", sorter: "number", hozAlign: "right" },
                    { title: "Own Retail Cost", field: "ownRetailCost", sorter: "number", hozAlign: "right" },
                    { title: "Currency", field: "currencyCode", sorter: "string", hozAlign: "center" },
                    { title: "Proposal", field: "projectComponent.proposal", sorter: "string" },
                    { title: "Account", field: "projectComponent.account", sorter: "string" },
                    { title: "Organization", field: "projectComponent.organization", sorter: "string" },
                    { title: "Organizational Unit", field: "projectComponent.organizationalUnit", sorter: "string" },
                    { title: "Location", field: "projectComponent.location", sorter: "string" },
                    { title: "Group", field: "projectComponent.group", sorter: "string" },
                    { title: "Environment", field: "projectComponent.environment", sorter: "string" },
                    { title: "Responsible", field: "projectComponent.Responsible", sorter: "string" },
                    { title: "Design", field: "projectDesign.name", sorter: "string" },
                    { title: "Design Version", field: "projectDesign.version", sorter: "string" },
                    { title: "Scenario", field: "projectScenario.name", sorter: "string" },
                    { title: "Project", field: "projectInfo.name", sorter: "string" },
                    { title: "Platform", field: "platformInfo.name", sorter: "string" },
                    { title: "Product", field: "platformProduct.label", sorter: "string" },
                    { title: "Category", field: "platformProduct.category", sorter: "string" },
                    { title: "Region", field: "platformRegion.label", sorter: "string" },
                    { title: "Service", field: "platformService.label", sorter: "string" },
                    { title: "Service Name", field: "platformRate.serviceName", sorter: "string" },
                    { title: "Service Family", field: "platformRate.serviceFamily", sorter: "string" },
                    { title: "Product Name", field: "platformRate.productName", sorter: "string" },
                    { title: "Minimum Units", field: "platformRate.minimumUnits", sorter: "string" },
                    { title: "Rate Type", field: "platformRate.rateType", sorter: "string" }
                ]
            });

            table.on("rowSelectionChanged", function (data, rows, selected, deselected) {
                if (data.length === 0) {
                    // No row selected, disable buttons
                    // $("#addBtn, #editBtn, #deleteBtn, #unitBtn").prop("disabled", true);
                    window.selectedRecord = null; // Clear global selectedRecord
                } else {
                    // A row is selected, enable buttons
                    // $("#addBtn, #editBtn, #deleteBtn, #unitBtn").prop("disabled", false);
                    window.selectedRecord = data[0]; // Store selected record globally
                }
            });

            $.ajax({
                url: "?handler=entries",
                method: "GET",
                data: {
                    projectSimulationId: "@Model.Data.Id"
                },
                success: function (response) {
                    // On success, set the data to Tabulator
                    table.setData(response);
                },
                error: function (error) {
                    console.error("Error loading data:", error);
                }
            });
        };

        document.addEventListener("DOMContentLoaded", function () {
            loadTable();
        });

        window.addEventListener("pageshow", function (event) {
            if (event.persisted || performance.getEntriesByType("navigation")[0].type === "back_forward") {
                loadTable();
            }
        });

        document.getElementById("download-xlsx").addEventListener("click", function () {
            table.download("xlsx", "simulation.xlsx", { sheetName: "Data" });
        });
    </script>
}