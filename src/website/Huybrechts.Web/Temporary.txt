
public static class SetuptUnitHelper2
{
    private static SetupUnit? _defaultSetupUnit;

    public static decimal ConvertUnit(decimal value, SetupUnit fromUnit, SetupUnit toUnit)
    {
        // Ensure the units are of the same UnitType
        if (fromUnit.UnitType != toUnit.UnitType)
            throw new ArgumentException("Incompatible unit types");

        // Convert the value to the base unit by dividing by the fromUnit factor
        decimal baseValue = value * fromUnit.Factor;

        // Convert from the base unit to the target unit by multiplying by the toUnit factor
        decimal convertedValue = baseValue / toUnit.Factor;

        // Apply precision settings
        return Math.Round(convertedValue, toUnit.Precision, toUnit.PrecisionType);
    }

    public static CreateCommand CreateNew() => new() { Id = Ulid.NewUlid() };

    public static async Task<List<SetupUnit>> GetSetupUnitsAsync(FeatureContext dbcontext, CancellationToken token)
    {
        return await dbcontext.Set<SetupUnit>()
            .OrderBy(o => o.UnitType).ThenBy(o => o.Name)
            .ToListAsync(cancellationToken: token);
    }

    public static async Task<SetupUnit> FindOrCreateDefaultSetupUnitAsync(FeatureContext context, bool save, CancellationToken token)
    {
        if (_defaultSetupUnit is not null)
            return _defaultSetupUnit;

        SetupUnit? record = await context.Set<SetupUnit>().FirstOrDefaultAsync(f => f.Code == "DEFAULT", cancellationToken: token);
        if (record is not null)
            return record;

        record = new()
        {
            Id = Ulid.NewUlid(),
            Code = "DEFAULT",
            Name = "Default",
            Factor = 1,
            IsBase = false,
            Precision = 0,
            PrecisionType = MidpointRounding.ToEven,
            UnitType = SetupUnitType.System,
            Remark = null,
            SearchIndex = "default",
            Description = "Default unit",
            CreatedDT = DateTime.UtcNow,
        };

        context.Set<SetupUnit>().Add(record);
        if (save)
            await context.SaveChangesAsync(token);
        _defaultSetupUnit = record;
        return record;
    }

    internal static Result RecordNotFound(Ulid id) => Result.Fail(Messages.INVALID_SETUPUNIT_ID.Replace("{0}", id.ToString()));

    internal static Result DuplicateFound(string name) => Result.Fail(Messages.DUPLICATE_SETUPUNIT_NAME.Replace("{0}", name.ToString()));

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "CA1862:Use the 'StringComparison' method overloads to perform case-insensitive string comparisons", Justification = "EntityFrameworkCore")]
    public static async Task<bool> IsDuplicateNameAsync(DbContext context, string name, Ulid? currentId = null)
    {
        name = name.ToLower().Trim();

        return await context.Set<SetupUnit>()
            .AnyAsync(pr => pr.Name.ToLower() == name
                            && (!currentId.HasValue || pr.Id != currentId.Value));
    }
}