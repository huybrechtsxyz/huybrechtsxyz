[Fact]
    public void GetSetupUnitsAsync_ShouldFetchFromDatabase_WhenCacheIsEmpty()
    {
        var tenantInfo = new TenantInfo()
        {
            Id = "tenant-id",
            Identifier = "tenant-identifier",
            Name = "Tenant Name",
        };



        var mockMultiTenantContext = new Mock<IMultiTenantContext<TenantInfo>>();
        mockMultiTenantContext.Setup(x => x.TenantInfo).Returns(tenantInfo);

        var mockMultiTenantContextAccessor = new Mock<IMultiTenantContextAccessor<TenantInfo>>();
        mockMultiTenantContextAccessor.Setup(x => x.MultiTenantContext).Returns(mockMultiTenantContext.Object);

        var mockOptions = new DbContextOptionsBuilder<FeatureContext>()
            .UseInMemoryDatabase(databaseName: "TestDb")
            .Options;

        FeatureContext mockContext = new(mockMultiTenantContextAccessor.Object, mockOptions);

        // Arrange
        var mockCache = new Mock<IMemoryCache>();
        var token = new CancellationToken();

        var setupUnitList = new List<SetupUnit>
        {
            new() { Name = "Unit1", UnitType = SetupUnitType.Length }
        };
        mockContext.Set<SetupUnit>().AddRange(setupUnitList);

        //mockContext.Setup(x => x.Set<SetupUnit>()).ReturnsDbSet(setupUnitList);
        //mockCache.Setup(x => x.TryGetValue(It.IsAny<object>(), out It.Ref<List<SetupUnit>>.IsAny!)).Returns(false);

        var helper = new SetupUnitHelper(mockCache.Object, mockContext);

        // Act
        var result = helper.GetSetupUnitsAsync(false, token);

        // Assert
        Assert.NotNull(result);
        Assert.Single(result);
    }

    [Fact]
    public void GetSetupUnitsAsync_ReturnsCachedValues_WhenNotRefreshed()
    {
        // Arrange
        var mockCache = new Mock<IMemoryCache>();
        var mockContext = new Mock<FeatureContext>();

        var setupUnits = new List<SetupUnit>
        {
            new() { Id = Ulid.NewUlid(), Code = "DEFAULT", Name = "Default Unit", Factor = 1 }
        };

        mockCache.Setup(m => m.TryGetValue(It.IsAny<object>(), out It.Ref<List<SetupUnit>>.IsAny!))
        .Returns((object key, out List<SetupUnit> value) =>
        {
            value = setupUnits; // Assign the test data
            return true; // Indicate success
        });

        var setupUnitHelper = new SetupUnitHelper(mockCache.Object, mockContext.Object);

        // Act
        var result = setupUnitHelper.GetSetupUnitsAsync(refresh: false);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(setupUnits.Count, result.Count);
        Assert.Equal(setupUnits[0].Name, result[0].Name);
    }

    [Fact]
    public void GetSetupUnitsAsync_ShouldFetchFromDatabase_WhenCacheIsEmpty()
    {
        // Arrange
        var mockCache = new Mock<IMemoryCache>();
        var mockContext = new Mock<FeatureContext>();
        var token = new CancellationToken();

        var setupUnitList = new List<SetupUnit>
        {
            new() { Name = "Unit1", UnitType = SetupUnitType.Length }
        };

        mockContext.Setup(x => x.Set<SetupUnit>()).ReturnsDbSet(setupUnitList);
        mockCache.Setup(x => x.TryGetValue(It.IsAny<object>(), out It.Ref<List<SetupUnit>>.IsAny!)).Returns(false);

        var helper = new SetupUnitHelper(mockCache.Object, mockContext.Object);

        // Act
        var result = helper.GetSetupUnitsAsync(false, token);

        // Assert
        Assert.NotNull(result);
        Assert.Single(result);
    }