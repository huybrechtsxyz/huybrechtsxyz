if (component.SourceType == SourceType.Platform) 
        {
            if (component.PlatformInfoId.HasValue && component.PlatformInfoId != Ulid.Empty)
            {
                var platform = await _dbcontext.Set<PlatformInfo>().FirstOrDefaultAsync(f => f.Id == component.PlatformInfoId, token);
                if(platform is not null && component.PlatformProductId.HasValue && component.PlatformProductId != Ulid.Empty)
                {
                    var product = await _dbcontext.Set<PlatformProduct>().FirstOrDefaultAsync(f => f.Id == component.PlatformProductId, token);
                    if (product is not null)
                    {
                        var rates = await _dbcontext.Set<PlatformRate>()
                            .Where(q => q.PlatformProductId == product.Id)
                            .Include(i => i.RateUnits)
                            .ThenInclude(j => j.SetupUnit)
                            .ToListAsync(token);

                        await _dbcontext.BeginTransactionAsync(token);

                        if (rates is not null && rates.Count > 0)
                        {
                            var distinctItems = rates
                                .Select(i => new { i.ServiceName, i.ProductName, i.SkuName })
                                .Distinct()
                                .ToList();


















                            if (distinctItems is not null && distinctItems.Count > 0)
                            {



                                var defaultUnits = await _dbcontext.Set<PlatformDefaultUnit>()
                                    .Where(unit => unit.PlatformInfoId == component.PlatformInfoId &&
                                        (unit.ServiceName == null || (unit.ServiceName != null && unit.ServiceName.ToLower() == rate.ServiceName.ToLower())) &&
                                    (rate.ProductName == null || (unit.ProductName != null && unit.ProductName.ToLower() == rate.ProductName.ToLower())) &&
                                    (rate.SkuName == null || (unit.SkuName != null && unit.SkuName.ToLower() == rate.SkuName.ToLower()))
                                   unit.is)
                .OrderBy(unit => unit.ServiceName)
                .ThenBy(unit => unit.ProductName)
                .ThenBy(unit => unit.SkuName)
                .ThenBy(unit => unit.Sequence)
                .ThenBy(unit => unit.MeterName ?? string.Empty)
                .ToListAsync(token);
                            }
                        }


                            /*
                             * ArgumentNullException.ThrowIfNull(rate);
            
            return units;
                             */

                            if (rates is not null && rates.Count > 0)
                        {
                            // Get all SetupUnit IDs associated with the current component units
                            var existingUnitIds = units.Select(u => u.SetupUnit!.Id).ToHashSet();

                            // Get all SetupUnits from the rates
                            var allSetupUnitsFromRates = rates.SelectMany(r => r.RateUnits)
                                .Select(ru => ru.SetupUnit)
                                .Distinct()
                                .ToList();

                            foreach (var rate in rates)
                            {
                                foreach (var rateUnit in rate.RateUnits)
                                {
                                    if (existingUnitIds.Contains(rateUnit.SetupUnit.Id))
                                        continue;

                                    ProjectComponentUnit newComponentUnit = new()
                                    {
                                        Id = Ulid.NewUlid(),
                                        CreatedDT = DateTime.UtcNow,
                                        ProjectInfoId = project.Id,
                                        ProjectDesignId = design.Id,
                                        ProjectComponent = component,

                                        Sequence = index,
                                        SetupUnit = rateUnit.SetupUnit,
                                        Variable = rateUnit.SetupUnit.Name.ToLower().Trim(),
                                        Quantity = 1,
                                        Expression = string.Empty
                                    };

                                    await _dbcontext.Set<ProjectComponentUnit>().AddAsync(newComponentUnit, token);
                                    existingUnitIds.Add(rateUnit.SetupUnit.Id);
                                    index += 10;
                                }
                            }
                        }

                        await _dbcontext.SaveChangesAsync(token);
                        await _dbcontext.CommitTransactionAsync(token);
                    }
                }
            }
        }