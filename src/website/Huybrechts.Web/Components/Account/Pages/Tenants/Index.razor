@page "/Account/Tenants"

@using Huybrechts.App.Identity
@using Huybrechts.App.Identity.Entities

@inject IdentityUserAccessor UserAccessor
@inject ApplicationTenantManager TenantManager

<PageTitle>Manage Tenants</PageTitle>

<h3>User Tenants</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <p>
            <a href="/Account/Tenants/Add" class="btn btn-primary" role="button">
                <span class="oi oi-plus" aria-hidden="true"></span> Create
            </a>
        </p>

        @if (model is not null && model.Count > 0)
        {
            <p>An overview of the accessible tenants.</p>
            <table>
                <tr>
                    <th></th>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>State</th>
                    <th></th>
                </tr>
                @foreach (var item in model)
                {
                    <tr>
                        <td>
                            @if (item.Picture is not null)
                            {
                                <img id="profilePicture" style="width:32px;height:32px; object-fit:cover" src="data:image/*;base64,@(Convert.ToBase64String(item.Picture))">
                            }
                            else
                            {
                                <img id="profilePicture" style="width:32px;height:32px; object-fit:cover" src="">
                            }
                        </td>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.State</td>
                        <td></td>
                    </tr>
                }
            </table>
        }
        else
        {
            <p>There are no tenants available at the moment</p>
        }
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private IList<ApplicationTenant>? model;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        model = await TenantManager.GetTenantsAsync();
    }
}
