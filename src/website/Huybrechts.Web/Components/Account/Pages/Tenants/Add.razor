@page "/Account/Tenants/Add"

@using Huybrechts.App.Identity
@using Huybrechts.App.Identity.Entities

@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor
@inject ApplicationTenantManager TenantManager

<PageTitle>Manage Tenants</PageTitle>

<h3>Create new tenant</h3>

<div class="row">
    <div class="col-md-6">
        @if (Model is not null)
        {
            <EditForm Model="Model" FormName="AddTenant" OnValidSubmit="OnValidSubmitAsync" method="post" enctype="multipart/form-data">
                <div>
                    <p>
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
                    </p>
                </div>
                <DataAnnotationsValidator class="text-danger" role="alert" />
                <ValidationSummary />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Model.Id" class="form-control" placeholder="Please choose a tenant identifier." />
                    <label for="Model.Id" class="form-label">Tenant</label>
                    <ValidationMessage For="@(() => Model.Id)" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Model.Name" class="form-control" placeholder="Please choose a tenant name." />
                    <label for="Model.Name" class="form-label">Name</label>
                    <ValidationMessage For="@(() => Model.Name)" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Model.Description" class="form-control" placeholder="Please choose a tenant description." />
                    <label for="Model.Description" class="form-label">Description</label>
                    <ValidationMessage For="@(() => Model.Description)" />
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="Model.Remark" class="form-control" placeholder="Please choose a tenant remark." />
                    <label for="Model.Remark" class="form-label">Remark</label>
                    <ValidationMessage For="@(() => Model.Remark)" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="text" value="Model.State" class="form-control" placeholder="Tenant state." disabled />
                    <label for="Model.State" class="form-label">State</label>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button class="btn btn-light" @onclick="CancelItem">Cancel</button>
                </div>
            </EditForm>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
</div>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private ApplicationTenant Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        Model = TenantManager.NewTenant();
    }

    private async Task OnValidSubmitAsync()
    {
        if (Model is null)
            return;
        await TenantManager.AddTenantAsync(Model);
    }

    private void CancelItem()
    {
        NavigationManager.NavigateTo("/Account/Tenants");
    }
}
