// <auto-generated />
using System;
using Huybrechts.App.Features.Setup;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Huybrechts.Infra.Sqlite.Migrations.Setup
{
    [DbContext(typeof(SetupContext))]
    [Migration("20240825210106_CreateSetupUnit")]
    partial class CreateSetupUnit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Huybrechts.Core.Setup.SetupUnit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasComment("Primary Key");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasComment("A unique code representing the unit, standard across all instances.");

                    b.Property<DateTime>("CreatedDT")
                        .HasColumnType("TEXT")
                        .HasComment("Date time created");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasComment("A detailed description of the unit.");

                    b.Property<decimal>("Factor")
                        .HasPrecision(18, 10)
                        .HasColumnType("TEXT")
                        .HasComment("A multiplication factor used to convert this unit to the base unit.");

                    b.Property<bool>("IsBase")
                        .HasColumnType("INTEGER")
                        .HasComment("Indicates whether this unit is the base unit for its type.");

                    b.Property<DateTime?>("ModifiedDT")
                        .HasColumnType("TEXT")
                        .HasComment("Modified time created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasComment("The unique name of the unit within its type.");

                    b.Property<int>("Precision")
                        .HasColumnType("INTEGER")
                        .HasComment("Number of decimal places for the unit.");

                    b.Property<int>("PrecisionType")
                        .HasColumnType("INTEGER")
                        .HasComment("Determines how values are rounded according to the System.Decimal Rounding enum.");

                    b.Property<string>("Remark")
                        .HasColumnType("TEXT")
                        .HasComment("Additional remarks or comments about the unit.");

                    b.Property<string>("SearchIndex")
                        .HasColumnType("TEXT")
                        .HasComment("This field will store the normalized, concatenated values for searching");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UnitType")
                        .HasMaxLength(32)
                        .HasColumnType("INTEGER")
                        .HasComment("Gets or sets the type of the unit (e.g., Height, Weight, Volume, System, etc.).");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SearchIndex");

                    b.ToTable("SetupUnit", t =>
                        {
                            t.HasComment("Represents a measurement unit used for different types such as height, weight, volume, etc.");
                        });

                    b.HasAnnotation("Finbuckle:MultiTenant", true);
                });
#pragma warning restore 612, 618
        }
    }
}
