# version: '3.9'

#secrets:
# configs:
# volumes:

networks:
  lan-develop:
    external: true
  lan-platform:
    external: true
  wan-develop:
    external: true
  wan-platform:
    external: true

services:

  oauth2:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.6.0
    networks:
      - lan-${WORKSPACE}
      - wan-${WORKSPACE}
    secrets:
      - CLIENT_SECRET
    environment:
      DOMAIN_DEV: ${DOMAIN_DEV}
      ENVIRONMENT: ${ENVIRONMENT}
      KEYCLOAK_URL: 
      REALM: ${REALM_ID}
      CLIENT_ID_FILE: 
      CLIENT_SECRET_FILE:
    command:
      - --provider=oidc
      - --oidc-issuer-url=https://<KEYCLOAK_URL>/realms/<REALM>
      - --client-id=oauth2-proxy
      - --client-secret=/run/secrets/oauth2_client_secret
      - --cookie-secret=<YOUR_32_BYTE_BASE64_SECRET>
      - --email-domain=*
      - --upstream=file:///dev/null
      - --http-address=0.0.0.0:4180
      - --cookie-secure=true
      - --cookie-samesite=lax
      - --cookie-domain=<YOUR_DOMAIN>
      - --redirect-url=https://oauth2.<YOUR_DOMAIN>/oauth2/callback
      - --whitelist-domain=.<YOUR_DOMAIN>
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4180/"]
      interval: 60s
      timeout: 15s
      retries: 10
      start_period: 120s
    deploy:
      mode: global
      placement:
        constraints:
          - node.role==manager
          - node.labels.manager==true
      restart_policy:
        condition: on-failure
        delay: 10s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=true
        - traefik.http.services.oauth2.loadbalancer.server.scheme=http
        - traefik.http.services.oauth2.loadbalancer.server.port=4180
        - traefik.http.routers.oauth2.rule=Host(`oauth2.${DOMAIN_DEV}`)
        - traefik.http.routers.oauth2.entrypoints=websecure
        - traefik.http.routers.oauth2.tls.certresolver=${TRAEFIK_TLS_HTTP}
        - traefik.http.routers.oauth2.middlewares=
