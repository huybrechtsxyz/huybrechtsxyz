version: '3.9'

services:
  authentik-server:
    image: authentik/authentik:latest
    environment:
      AUTHENTIK_SECRET_KEY: "a-very-secret-key"       # generate strong secret!
      DATABASE_URL: "postgresql://authentik:authentikpassword@postgres/authentik"
      REDIS_URL: "redis://redis:6379/0"
      ALLOWED_HOSTS: "auth.${DOMAIN_DEV}"
      # Add other env vars as needed
    depends_on:
      - postgres
      - redis
    networks:
      - lan-${WORKSPACE}
    ports:
      - "8000:8000"  # optional, for direct access
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==worker
          - node.labels.role==infra
      restart_policy:
        condition: on-failure
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth.rule=Host(`auth.${DOMAIN_DEV}`)
      - traefik.http.routers.auth.entrypoints=websecure
      - traefik.http.routers.auth.tls.certresolver=${TRAEFIK_TLS_DNS}
      - traefik.http.services.auth.loadbalancer.server.port=8000

  authentik-worker:
    image: authentik/authentik-worker:latest
    environment:
      AUTHENTIK_SECRET_KEY: "a-very-secret-key"
      DATABASE_URL: "postgresql://authentik:authentikpassword@postgres/authentik"
      REDIS_URL: "redis://redis:6379/0"
    depends_on:
      - authentik-server
    networks:
      - lan-${WORKSPACE}
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==worker
          - node.labels.role==infra
      restart_policy:
        condition: on-failure

networks:
  lan-${WORKSPACE}:
    external: true
