# version: '3.9'

# secrets:
# configs:
# volumes:

networks:
  lan-platform:
    external: true

services:

  redis:
    image: "redis:7-alpine"
    volumes:
      - ${APP_PATH}/redis/data:/data
    networks:
      - lan-${WORKSPACE}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
          - node.labels.role==infra
        preferences:
          - spread: node.id
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=false

  redisinsight:
    image: redis/redisinsight:latest
    networks:
      - lan-${WORKSPACE}
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8001/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role==${DOCKER_WORKER}
          - node.labels.role==infra
        preferences:
          - spread: node.id
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      update_config:
        parallelism: 1
        delay: 15s
        failure_action: rollback
        monitor: 30s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 30s
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.redisinsight-strip-prefix.stripprefix.prefixes=/redis
        - traefik.http.services.redisinsight.loadbalancer.server.scheme=http
        - traefik.http.services.redisinsight.loadbalancer.server.port=8001
        - traefik.http.routers.redisinsight.rule=Host(`db.${DOMAIN_DEV}`) && PathPrefix(`/redis`)
        - traefik.http.routers.redisinsight.entrypoints=websecure
        - traefik.http.routers.redisinsight.tls.certresolver=${TRAEFIK_RESOLVER}
        - traefik.http.routers.redisinsight.service=redisinsight
        - traefik.http.routers.redisinsight.middlewares=redisinsight-strip-prefix,${TRAEFIK_MIDDLEWARES}
