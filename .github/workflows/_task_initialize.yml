# Initialize Server Task
name: Initialize Server Task

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      APP_HOST_SERVER:
        required: true
      APP_HOST_PORT:
        required: true
      APP_HOST_USERNAME:
        required: true
      APP_HOST_PASSWORD:
        required: true

jobs:
  initialize-server:
    name: Initialize Server Task
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Initialize server script
      uses: appleboy/ssh-action@v1.0.2
      with:
        host: ${{ secrets.APP_HOST_SERVER }}
        username: ${{ secrets.APP_HOST_USERNAME }}
        password: ${{ secrets.APP_HOST_PASSWORD }}
        port: ${{ secrets.APP_HOST_PORT }}
        script: |
          set -e  # Exit immediately if a command exits with a non-zero status
          cd /;  # Change to the root directory
          echo "Initializing server";
          echo "Reading package list";
          # Update the package lists for upgrades and new package installations
          apt-get -y update  
          
          # Install Apache utilities if not already installed
          echo "Install Apache utils"
          if checkgid &>>/dev/null; then
            echo "Apache utils are already installed"
          else
            apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common apache2-utils
          fi
          
          # Install Docker if not already installed
          echo "Install Docker"
          if docker --version &>>/dev/null; then
            echo "Docker already installed"
          else
            # Add Docker's official GPG key and repository if not already added
            if ! grep -q "^deb.*docker" /etc/apt/sources.list /etc/apt/sources.list.d/*; then
                curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            fi
            apt-get -y install docker-ce docker-ce-cli containerd.io  # Install Docker
            docker --version  # Log the Docker version installed
          fi
          
          # Install Docker-Compose if not already installed
          echo "Install Docker-Compose"
          if docker-compose --version; then
            echo "Docker-Compose already installed"
          else
            # Download the latest version of Docker-Compose
            curl -L "https://github.com/docker/compose/releases/download/latest/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose  # Make the binary executable
          fi
          
          # Install jq for JSON parsing if not already installed
          echo "Install json parser"
          if jq --help; then
            echo 'JSON parser already installed'
          else
            apt-get -y install jq  # Install jq
            echo 'JSON parser installed'
          fi
          
          # Set up and enable the firewall
          echo "Firewall set rules and enable"
          if ufw --version; then
            echo "Firewall already installed"
          else
            apt-get install ufw  # Install UFW (Uncomplicated Firewall)
          fi
          ufw default deny incoming  # Deny all incoming traffic by default
          ufw default deny outgoing  # Deny all outgoing traffic by default
          # Allow traffic from/to specific network ranges and essential ports
          ufw allow from 172.16.0.0/24
          ufw allow to 172.16.0.0/24
          ufw allow 22/tcp  # Allow SSH access
          ufw allow 80/tcp  # Allow HTTP traffic
          ufw allow 443/tcp  # Allow HTTPS traffic
          
          # Enable the firewall if it is not already active
          if ! ufw status | grep -q "active"; then
            echo "Enable firewall"
            echo "y" | ufw enable  # Enable the firewall
          fi
          ufw reload  # Reload UFW to apply changes

          # Optional Disk Formatting and Mounting (commented out)
          # Format the Disk (if unformatted)
          # mkfs.ext4 /dev/sdb1
          # Create a Mount Point
          # mkdir /mnt/data
          # Mount the Partition
          # mount /dev/sdb1 /mnt/data
          # Make the Mount Persistent (Optional)
          # nano /etc/fstab
          # /dev/sdb1  /mnt/data  ext4  defaults  0  0
