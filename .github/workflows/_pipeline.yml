# Build and Deploy Jobs
name: _BuildAndDeploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      initialize:
        required: true
        type: string
      rebuild:
        required: true
        type: string
    secrets:
      BITWARDEN_TOKEN:
        required: true

jobs:
  # Restore the Terraform cache and upload the output as an artifact
  restore:
    name: Restore Cache
    if: inputs.initialize == 'false'
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.restore-cache.outputs.cache-hit }}
    steps:
      # Restore Terraform Cache
      - name: Restore Terraform Cache
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: /tmp/tf_output.json
          key: terraform-output-${{ inputs.environment }}
      
      # Update Terraform Cache as Artifact
      - name: Upload Terraform Artifact
        if: steps.restore-cache.outputs.cache-hit == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-output-${{ inputs.environment }}
          path: /tmp/tf_output.json

      # Check if the cache was hit
      - name: Check Inputs
        run: |
          echo "Environment: ${{ inputs.environment }}"
          echo "Initialize: ${{ inputs.initialize }}"
          echo "Rebuild: ${{ inputs.rebuild }}"
          echo "Cache Hit: ${{ steps.restore-cache.outputs.cache-hit }}"

  debug-vars:
    name: Debug Vars
    needs: [restore]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Debug Vars
        run: |
          echo "Environment: ${{ inputs.environment }}"
          echo "Initialize: ${{ inputs.initialize }}"
          echo "Rebuild: ${{ inputs.rebuild }}"
          echo "Cache Hit: ${{ needs.restore.outputs.cache-hit }}"
          echo "Cache Hit (Debug): ${{ needs.restore.outputs.cache-hit }}"
          echo "Cache Result (Debug): ${{ needs.restore.result }}"
          echo "Cache Conclusion (Debug): ${{ needs.restore.conclusion }}"

  # Terraform Plan and Apply
  # This job will run if the cache is not hit or if the initialize input is set to true
  # Stores the output in a JSON file and uploads it as an artifact and caches it for future runs
  terraform:
    name: Terraform Plan and Apply
    needs: [restore]
    if: always() && ( inputs.initialize == 'true' || needs.restore.outputs.cache-hit != 'true' )
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      # Check out the repo
      - name: Check Out
        uses: actions/checkout@v4

      # Set up GitHub Secrets
      - name: Get General Secrets
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            d47e736b-2db8-47d5-b46b-b2c8016ece73 > TERRAFORM_API_TOKEN
            357068b9-9f5f-4f79-940c-b2c8016cb88f > KAMATERA_API_KEY
            6c9295a8-9fa4-4d38-8929-b2c8016d9b43 > KAMATERA_API_SECRET

      # Set up GitHub Secrets for Test Environment
      - name: Get Test Secrets
        if: ${{ inputs.environment == 'test' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            6cc5b975-56a9-4d7a-80c7-b2c90151cce0 > KAMATERA_PUBLIC_KEY
            5083ae32-429d-428b-b7df-b2c901441bbb > APP_ROOT_PASSWORD

      # Set up GitHub Secrets for Staging Environment
      - name: Get Staging Secrets
        if: ${{ inputs.environment == 'staging' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            4dc11520-0305-47fd-bd2a-b2c901526d65 > KAMATERA_PUBLIC_KEY
            924b9526-a6cf-43c1-93a9-b2c9014494ae > APP_ROOT_PASSWORD

      # Set up GitHub Secrets for Production Environment
      - name: Get Production Secrets
        if: ${{ inputs.environment == 'production' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            ee623c15-a017-44c5-91e0-b2c9015298a9 > KAMATERA_PUBLIC_KEY
            6db5856c-3f7f-4b62-9846-b2c90144cb0b > APP_ROOT_PASSWORD

      # Set up the Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      # Run Terraform to create docker swarm cluster
      - name: Run Terraform Apply
        id: tfapply
        working-directory: ./deploy
        run: |
          # Set the Terraform environment variables
          export TF_TOKEN_app_terraform_io=$TERRAFORM_API_TOKEN
          export TF_VAR_api_key=$KAMATERA_API_KEY
          export TF_VAR_api_secret=$KAMATERA_API_SECRET
          export TF_VAR_ssh_public_key=$KAMATERA_PUBLIC_KEY
          export TF_VAR_password=$APP_ROOT_PASSWORD
          export TF_VAR_environment=${{ inputs.environment }}
          export TF_LOG=DEBUG
          export ENVIRONMENT=${{ inputs.environment }}

          # Generate main.tf from template
          echo "Generating main.tf from template"
          envsubst < main.template.tf > main.tf
          rm -f main.template.tf
          cat main.tf

          # Initialize Terraform
          echo "Running terraform...INIT"
          terraform init

          # Create the plan file
          # Terraform Cloud does not support saving the generated execution plan locally at this time.
          echo "Running terraform...PLAN"
          terraform plan -var-file="vars-${{ inputs.environment }}.tfvars" -input=false

          # Apply the plan file
          echo "Running terraform...APPLY"
          terraform apply -auto-approve -var-file="vars-${{ inputs.environment }}.tfvars" -input=false

          # Get the output
          echo "Reading Terraform output..."
          echo $(terraform output -json outputdata)
          terraform output -json outputdata | jq -c '.' > tf_output.json
          cp tf_output.json /tmp/tf_output.json
          # MATRIX=$(terraform output -json outputdata | jq -c '.')
          # echo $MATRIX
          # echo "tf_output=$MATRIX" >> "$GITHUB_OUTPUT"

      # Upload the Terraform output as an artifact
      - name: Upload Terraform Output
        uses: actions/upload-artifact@v4
        with:
          name: terraform-output-${{ inputs.environment }}
          path: ./deploy/tf_output.json
          if-no-files-found: error

      # Upload the Terraform output as a job output
      - name: Cache Terraform Output
        uses: actions/cache/save@v4
        with:
          path: /tmp/tf_output.json
          key: terraform-output-${{ inputs.environment }}
  
  # Download the Terraform output artifact and parse it to find Swarm servers
  # This job will run if the cache is not hit or if the initialize input is set to true
  # Parses the output to find Swarm servers and sets them as a matrix for the next jobs
  download:
    name: Download Terraform Output
    needs: [restore, terraform]
    if: always()
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      matrix: ${{ steps.parse.outputs.matrix }}
    steps:
      # Download Terraform Output
      - name: Download Terraform Output
        uses: actions/download-artifact@v4
        with:
          name: terraform-output-${{ inputs.environment }}
          path: /tmp
      
      # Check if the artifact exists
      - name: Check if tf_output.json exists
        run: |
          if [ ! -f /tmp/tf_output.json ]; then
            echo "Artifact terraform-output-${{ inputs.environment }} not found or tf_output.json missing. Exiting."
            exit 1
          fi

      # Parse Terraform Output to find Swarm Servers
      - name: Parse Swarm Servers
        id: parse
        run: |
          matrix=$(jq -c '.' /tmp/tf_output.json)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  # Initialize the Swarm Cluster
  # This job will run if the cache is not hit or if the initialize input is set to true
  # Initializes the Swarm cluster
  initialization:
    name: Initialize Swarm Cluster
    needs: [restore, download]
    if: always() && ( inputs.initialize == 'true' || needs.restore.outputs.cache-hit != 'true' )
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix: ${{ fromJson(needs.download.outputs.matrix) }}
    steps:
      # Set up GitHub Secrets for Test Environment
      - name: Get Test Secrets
        if: ${{ inputs.environment == 'test' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Staging Environment
      - name: Get Staging Secrets
        if: ${{ inputs.environment == 'staging' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            0c1f1f1c-456b-47d5-aad4-b2c9015ca6dc > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Production Environment
      - name: Get Production Secrets
        if: ${{ inputs.environment == 'production' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            02ed2dea7-b72e-401b-ae7e-b2c9015cd76e > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Environment
      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "$KAMATERA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step: Copy the key securely to the remote server using scp
      - name: Upload Private Key to Remote Server
        run: |
          scp -o StrictHostKeyChecking=no ~/.ssh/id_rsa root@${{ matrix.ip }}:/root/.ssh/id_rsa_temp || { echo "[x] Failed to transfer private key to remote server"; exit 1; }

      # Step: Copy the initialization script securely to the remote server using scp
      - name: Upload Initialization Script to Remote Server
        run: |
          scp -o StrictHostKeyChecking=no ./scripts/initialize* root@${{ matrix.ip }}:/tmp || { echo "[x] Failed to transfer initialization script to remote server"; exit 1; }

      # Initialize the server with initialization script
      - name: Initialize BEFORE ${{ inputs.environment }} Server ${{ matrix.label }}
        run: |
          echo "[*] Executing BEFORE initializing remotely..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            chmod +x /tmp/initialize-begin.sh
            /tmp/initialize-begin.sh
          EOF
          echo "[*] Executing BEFORE initializing remotely...DONE"

      # Initialize the server with initialization script
      - name: Initialize ${{ inputs.environment }} Server ${{ matrix.label }}
        run: |
          echo "[*] Executing INTERNAL initializing remotely..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            echo "[*] Initializing server..."
            set -euo pipefail
            cd /

            configure_swarm() {
              local hostname
              hostname=$(hostname)
              echo "[*] Configuring Docker Swarm on $hostname..."

              #if docker info 2>/dev/null | grep -q "Swarm: active"; then
              if [ "$(docker info --format '{{.Swarm.LocalNodeState}}' 2>/dev/null)" = "active" ]; then
                echo "[*] Node already part of a Swarm. Skipping initialization/joining."
                if [[ "$hostname" == *"manager-1"* ]]; then
                  docker swarm join-token manager -q > /tmp/manager_token.txt
                  docker swarm join-token worker -q > /tmp/worker_token.txt
                fi
                return
              fi

              if [[ "$hostname" == *"manager-1"* ]]; then
                echo "[*] Initializing new Swarm cluster..."
                docker swarm init --advertise-addr ${{ matrix.private_ip }}

                mkdir -p /tmp
                chmod 1777 /tmp

                docker swarm join-token manager -q > /tmp/manager_token.txt
                docker swarm join-token worker -q > /tmp/worker_token.txt
                echo "[*] Saved manager and worker join tokens."
              else
                echo "[*] Joining existing Swarm cluster on ${{ matrix.manager_ip }}..."

                # SSH options for non-interactive CI (skip host key checking)
                SSH_OPTS="-o StrictHostKeyChecking=no -o ConnectTimeout=10"

                # Wait for manager token to appear (max ~60s)
                for i in {1..12}; do
                  if ssh $SSH_OPTS root@${{ matrix.manager_ip }} 'test -f /tmp/manager_token.txt && test -f /tmp/worker_token.txt'; then
                    echo "[*] Swarm tokens are available on ${{ matrix.manager_ip }}"
                    break
                  fi
                  echo "[!] Attempt $i: Waiting for Swarm tokens on ${{ matrix.manager_ip }}..."
                  sleep 5
                done

                # Final check before proceeding
                if ! ssh $SSH_OPTS root@${{ matrix.manager_ip }} 'test -f /tmp/manager_token.txt && test -f /tmp/worker_token.txt'; then
                  echo "[x] Timed out waiting for Swarm tokens. Exiting."
                  exit 1
                fi

                # Retrieve tokens
                MANAGER_JOIN_TOKEN=$(ssh $SSH_OPTS root@${{ matrix.manager_ip }} 'cat /tmp/manager_token.txt')
                WORKER_JOIN_TOKEN=$(ssh $SSH_OPTS root@${{ matrix.manager_ip }} 'cat /tmp/worker_token.txt')

                # Decide node role
                if [[ "$hostname" == *"manager-"* ]]; then
                  echo "[*] Joining as Swarm Manager..."
                  docker swarm join --token "$MANAGER_JOIN_TOKEN" ${{ matrix.manager_ip }}:2377 --advertise-addr ${{ matrix.private_ip }}
                else
                  echo "[*] Joining as Swarm Worker..."
                  docker swarm join --token "$WORKER_JOIN_TOKEN" ${{ matrix.manager_ip }}:2377 --advertise-addr ${{ matrix.private_ip }}
                fi

                echo "[*] Successfully joined Swarm cluster"

              fi
            }

            main() {
              configure_swarm
            }
            main
          EOF
          echo "[*] Executing INTERNAL initializing remotely...DONE"

      # Initialize the server with initialization script
      - name: Initialize AFTER ${{ inputs.environment }} Server ${{ matrix.label }}
        run: |
          echo "[*] Executing AFTER initializing remotely..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            chmod +x /tmp/initialize-end.sh
            /tmp/initialize-end.sh
          EOF
          echo "[*] Executing AFTER initializing remotely...DONE"

  # Configure the Swarm Cluster
  # This job will run if the cache is not hit or if the initialize input is set to true
  # Configures the Swarm cluster with the provided environment variables and secrets
  # Prepares the Swarm cluster for deployment
  configuration:
    name: Configure Swarm Cluster
    needs: [download, initialization]
    if: always()
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix: ${{ fromJson(needs.download.outputs.matrix) }}
    steps:
      # Check out the repo
      - name: Check Out
        uses: actions/checkout@v4

      # Load environment variables from .env file
      - name: Get Environment Variables
        run: |
          echo "[*] Loading variables from ./src/${{ inputs.environment }}.env file..."
          while IFS='=' read -r key value || [ -n "$key" ]; do
            [[ -z "$key" || "$key" == \#* ]] && continue
            value="${value%\"}"
            value="${value#\"}"
            echo "$key=$value" >> "$GITHUB_ENV"
          done < ./src/${{ inputs.environment }}.env
          echo "[*] Loading variables from ./src/${{ inputs.environment }}.env file...DONE"

      # Set up GitHub Secrets
      - name: Get Secrets
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            f53a76ab-b87f-4af0-9aa4-b2d1016aba2b > VERSIO_USERNAME
            3d7bbfcd-18a5-4762-9064-b2d1016aef63 > VERSIO_PASSWORD
            5db70d74-c5db-459a-b916-b2d80126d8a3 > TRAEFIK_CLIENTID
            f5eaa406-b7cb-4ea8-b260-b2d80127303d > TRAEFIK_SECRET

      # Set up GitHub Secrets for Test Environment
      - name: Get Test Secrets
        if: ${{ inputs.environment == 'test' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY
            5083ae32-429d-428b-b7df-b2c901441bbb > APP_ROOT_PASSWORD

      # Set up GitHub Secrets for Staging Environment
      - name: Get Staging Secrets
        if: ${{ inputs.environment == 'staging' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            0c1f1f1c-456b-47d5-aad4-b2c9015ca6dc > KAMATERA_PRIVATE_KEY
            924b9526-a6cf-43c1-93a9-b2c9014494ae > APP_ROOT_PASSWORD

      # Set up GitHub Secrets for Production Environment
      - name: Get Production Secrets
        if: ${{ inputs.environment == 'production' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            02ed2dea7-b72e-401b-ae7e-b2c9015cd76e > KAMATERA_PRIVATE_KEY
            6db5856c-3f7f-4b62-9846-b2c90144cb0b > APP_ROOT_PASSWORD

      # Set up SSH connection
      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "$KAMATERA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Configure Swarm Server
      - name: Configure Server
        run: |
          echo "[*] Generating configuration script..."
          #envsubst < "./scripts/configure.template.sh" > "./scripts/configure.sh"
          
          echo "[*] Copying variables to remote server..."
          cat <<EOF > /tmp/secrets.env
          APP_ROOT_PASSWORD=$APP_ROOT_PASSWORD
          VERSIO_USERNAME=$VERSIO_USERNAME
          VERSIO_PASSWORD=$VERSIO_PASSWORD
          TRAEFIK_CLIENTID=$TRAEFIK_CLIENTID
          TRAEFIK_SECRET=$TRAEFIK_SECRET
          EOF

          # Copy secrets to remote server
          scp -o StrictHostKeyChecking=no /tmp/secrets.env root@${{ matrix.ip }}:/tmp/secrets.env || {
            echo "[x] Failed to transfer variables to remote server"
            exit 1
          }

          # Copy environment variables to remote server
          echo "[*] Copying environment variables to remote server..."
          scp -o StrictHostKeyChecking=no ./src/${{ inputs.environment }}.env root@${{ matrix.ip }}:/tmp/variables.env || {
            echo "[x] Failed to transfer variables to remote server"
            exit 1
          }

          # Copy the configuration script to the remote server
          echo "[*] Copying configuration script to remote server..."
          scp -o StrictHostKeyChecking=no "./scripts/configure*" root@${{ matrix.ip }}:/tmp || {
            echo "[x] Failed to transfer configuration script to remote server"
            exit 1
          }

          # Execute the configuration script remotely
          echo "[*] Executing configuration script remotely..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            chmod +x /tmp/configure-begin.sh
            /tmp/configure-begin.sh
            cp /tmp/variables.env /app/.env
          EOF

          # Copy /src to /app
          echo "[*] Copying source to remote server..."
          #find ./src -maxdepth 1 -type f -exec scp -o StrictHostKeyChecking=no {} root@${{ matrix.ip }}:/app/ \;
          scp -o StrictHostKeyChecking=no ./src/*.yml root@${{ matrix.ip }}:/app
          scp -o StrictHostKeyChecking=no ./scripts/startenv.sh root@${{ matrix.ip }}:/app/startenv.sh
          scp -o StrictHostKeyChecking=no ./scripts/stopenv.sh root@${{ matrix.ip }}:/app/stopenv.sh

      # Configure Traefik Server
      - name: Configure Traefik
        run: |
          # TRAEFIK
          echo "[*] Deploying TRAEFIK to remote server..."
          envsubst \
            '${DOMAIN_DEV} ${ENVIRONMENT}' \
            < ./src/traefik/traefik-config.template.yml \
            > ./src/traefik/traefik-config.yml
          scp -o StrictHostKeyChecking=no ./src/traefik/* root@${{ matrix.ip }}:/app/traefik/conf/ || {
            echo "[x] Failed to transfer traefik configuration to remote server"
            exit 1
          }
          echo "[*] Deploying TRAEFIK to remote server...DONE"
      
      # Configure Consul Server
      - name: Configure Consul
        run: |
          # CONSUL
          echo "[*] Deploying CONSUL to remote server..."
          scp -o StrictHostKeyChecking=no ./src/consul/* root@${{ matrix.ip }}:/app/consul/conf/ || {
            echo "[x] Failed to transfer consul configuration to remote server"
            exit 1
          }
          echo "[*] Deploying CONSUL to remote server...DONE"

      # Configure Postgres Server
      - name: Configure Postgres
        run: |
          # POSTGRES
          echo "[*] Deploying POSTGRES to remote server..."
          scp -o StrictHostKeyChecking=no ./src/postgres/* root@${{ matrix.ip }}:/app/postgres/conf/ || {
            echo "[x] Failed to transfer postgres configuration to remote server"
            exit 1
          }
          # Update the worker-1 node with the postgres tag
          if [[ "$hostname" != *"manager-1"* ]]; then
            exit 0
          fi
          echo "[*] Updating worker-1 node with postgres tag..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
          POSTGRES_NODE=$(docker node ls --format '{{.Hostname}}' | grep "worker-1")
          docker node update --label-add postgres=true $POSTGRES_NODE
          EOF
          echo "[*] Deploying POSTGRES to remote server...DONE"

      # Configure Keycloak Server
      - name: Configure Keycloak
        run: |
          # KEYCLOAK
          echo "[*] Deploying KEYCLOAK to remote server..."
          # Generate realm.json
          envsubst < ./src/keycloak/keycloak-realm.template.json > ./src/keycloak/keycloak-realm.json
          # Copy the keycloak configuration to the remote server
          scp -o StrictHostKeyChecking=no ./src/keycloak/* root@${{ matrix.ip }}:/app/keycloak/conf/ || {
            echo "[x] Failed to transfer keycloak configuration to remote server"
            exit 1
          }
          echo "[*] Deploying KEYCLOAK to remote server...DONE"

      # Configure Telemetry Server
      - name: Configure Telemetry
        run: |
          # TELEMETRY
          echo "[*] Deploying TELEMETRY to remote server..."
          # Copy the telemetry configuration to the remote server
          scp -o StrictHostKeyChecking=no ./src/telemetry/* root@${{ matrix.ip }}:/app/telemetry/conf/ || {
            echo "[x] Failed to transfer telemetry configuration to remote server"
            exit 1
          }
          echo "[*] Deploying TELEMETRY to remote server...DONE"

      # Finish Configuration
      - name: Finish Configuration
        run: |
          echo "[*] Finishing configuration..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            chmod +x /tmp/configure-end.sh
            /tmp/configure-end.sh
          EOF
          echo "[*] Finishing configuration...DONE"

  # Start the Environment
  # This job will run only for the first manager node in the matrix
  start:
    name: Start Environment
    needs: [download, configuration]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix: ${{ fromJson(needs.download.outputs.matrix) }}
    steps:
      # Set up GitHub Secrets for Test Environment
      - name: Get Test Secrets
        if: ${{ inputs.environment == 'test' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Staging Environment
      - name: Get Staging Secrets
        if: ${{ inputs.environment == 'staging' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            0c1f1f1c-456b-47d5-aad4-b2c9015ca6dc > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Production Environment
      - name: Get Production Secrets
        if: ${{ inputs.environment == 'production' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            02ed2dea7-b72e-401b-ae7e-b2c9015cd76e > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Environment
      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "$KAMATERA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Start the environment
      - name: Start Environment
        run: |
          echo "[*] Starting Environment..."
          if [[ "${{ matrix.name }}" != *"manager-1"* ]]; then
            exit 0
          fi

          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            cd /app
            ./stopenv.sh
            ./startenv.sh
          EOF
          echo "[*] Starting Environment...DONE"
