# Build and Deploy Jobs
name: _InfraBuildDeploy

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      environment:
        required: true
        type: string
      infrastructure:
        required: true
        type: boolean
      rebuild:
        required: true
        type: boolean
      services:
        required: true
        type: string
    secrets:
      BITWARDEN_TOKEN:
        required: true

jobs:
  # Terraform Plan and Apply
  # This job will run if the cache is not hit or if the initialize input is set to true
  # Stores the output in a JSON file and uploads it as an artifact and caches it for future runs
  terraform:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: inputs.infrastructure == true
    steps:
      # Check out the repo
      - name: Check Out
        uses: actions/checkout@v4
      
      # Set up GitHub Secrets
      - name: Get General Secrets
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            d47e736b-2db8-47d5-b46b-b2c8016ece73 > TERRAFORM_API_TOKEN
            357068b9-9f5f-4f79-940c-b2c8016cb88f > KAMATERA_API_KEY
            6c9295a8-9fa4-4d38-8929-b2c8016d9b43 > KAMATERA_API_SECRET
            6cc5b975-56a9-4d7a-80c7-b2c90151cce0 > KAMATERA_PUBLIC_KEY
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY
            5083ae32-429d-428b-b7df-b2c901441bbb > KAMATERA_ROOT_PASSWORD
      
      # Set up the Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false
      
      # Run Terraform to create docker swarm cluster
      - name: Run Terraform Apply
        id: tfapply
        working-directory: ./deploy
        run: |
          # Set the Terraform environment variables
          export TF_TOKEN_app_terraform_io=$TERRAFORM_API_TOKEN
          export TF_VAR_api_key=$KAMATERA_API_KEY
          export TF_VAR_api_secret=$KAMATERA_API_SECRET
          export TF_VAR_ssh_public_key=$KAMATERA_PUBLIC_KEY
          export TF_VAR_password=$KAMATERA_ROOT_PASSWORD
          export TF_VAR_workspace=${{ inputs.workspace }}
          export TF_VAR_environment=${{ inputs.environment }}
          export TF_LOG=DEBUG
          export WORKSPACE=${{ inputs.workspace }}
          export ENVIRONMENT=${{ inputs.environment }}

          # Generate main.tf from template
          echo "Generating main.tf from template"
          envsubst < main.template.tf > main.tf
          rm -f main.template.tf
          cat main.tf

          # Initialize Terraform
          echo "Running terraform...INIT"
          terraform init

          # Create the plan file
          # Terraform Cloud does not support saving the generated execution plan locally at this time.
          echo "Running terraform...PLAN"
          terraform plan -var-file="vars-${{ inputs.workspace }}.tfvars" -input=false

          # Apply the plan file
          echo "Running terraform...APPLY"
          terraform apply -auto-approve -var-file="vars-${{ inputs.workspace }}.tfvars" -input=false

          # Get the output
          echo "Reading Terraform output..."
          echo $(terraform output -json serverdata)
          terraform output -json serverdata | jq -c '.' > tf_output.json
          cp tf_output.json /tmp/tf_output.json
          echo "Reading Terraform output...CAT"
          cat /tmp/tf_output.json
          echo "Reading Terraform output...DONE"

      # Upload the Terraform output as an artifact
      - name: Upload Terraform Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-output-${{ inputs.workspace }}
          path: /tmp/tf_output.json
          if-no-files-found: error
      
      # Check if Terraform cache exists
      - name: Check Existing Terraform Cache
        id: check-cache
        uses: actions/cache/restore@v4
        with:
          path: /tmp/tf_output.json
          key: terraform-output-${{ inputs.workspace }}

      # Upload the Terraform output as a job output
      - name: Cache Terraform Output
        if: steps.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: /tmp/tf_output.json
          key: terraform-output-${{ inputs.workspace }}

  # Download the Terraform output artifact and parse it to find Swarm servers
  # This job will run if the cache is not hit or if the initialize input is set to true
  # Parses the output to find Swarm servers and sets them as a matrix for the next jobs
  restore:
    name: Download Terraform Output
    runs-on: ubuntu-latest
    needs: [terraform]
    environment: ${{ inputs.environment }}
    outputs:
      matrix: ${{ steps.parse.outputs.matrix }}
    steps:
      # Download Terraform Artifact
      - name: Download Terraform Artifact
        if: inputs.infrastructure == true
        uses: actions/download-artifact@v4
        with:
          name: terraform-output-${{ inputs.workspace }}
          path: /tmp

      # Restore Terraform Cache
      - name: Restore Terraform Cache
        id: restore-cache
        if: inputs.infrastructure != true
        uses: actions/cache/restore@v4
        with:
          path: /tmp/tf_output.json
          key: terraform-output-${{ inputs.workspace }}

      # Check if the artifact exists
      - name: Validate Terraform Output
        run: |
          if [ ! -f /tmp/tf_output.json ]; then
            echo "Artifact terraform-output-${{ inputs.workspace }} not found or tf_output.json missing. Exiting."
            exit 1
          fi

      # Parse Terraform Output to find Swarm Servers
      - name: Parse Swarm Servers
        id: parse
        run: |
          matrix=$(jq -c '.' /tmp/tf_output.json)
          echo "================"
          echo "$matrix"
          echo "================"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  # Initialize the Swarm Cluster
  # This job will run if the cache is not hit or if the initialize input is set to true
  # Initializes the Swarm cluster
  initialization:
    name: Initialize Swarm Cluster
    needs: [restore]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: inputs.infrastructure == true
    strategy:
      matrix: ${{ fromJson(needs.restore.outputs.matrix) }}
    steps:
      # Check out the repo
      - name: Check Out
        uses: actions/checkout@v4

      # Debug the matrix
      - name: Debug Matrix
        run: |
          echo "Matrix=${{ toJson(matrix) }}"

      # Set up GitHub Secrets
      - name: Get General Secrets
        id: get-secrets
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Environment
      - name: Set up SSH connection
        env:
          KAMATERA_PRIVATE_KEY: ${{ steps.get-secrets.outputs.KAMATERA_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$KAMATERA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step: Copy the key securely to the remote server using scp
      - name: Upload Private Key
        run: |
          scp -o StrictHostKeyChecking=no ~/.ssh/id_rsa root@${{ matrix.ip }}:/root/.ssh/id_rsa_temp || { echo "[x] Failed to transfer private key to remote server"; exit 1; }

      # Step: Copy the initialization script securely to the remote server using scp
      - name: Upload Initialization Scripts
        run: |
          # Copy the initialization scripts to the remote server
          echo "[*] Copying initialization script to remote server..."
          scp -o StrictHostKeyChecking=no "./scripts/initialize-begin.sh" root@${{ matrix.ip }}:/tmp/initialize-begin.sh || {
            echo "[x] Failed to transfer before initialization script to remote server"
            exit 1
          }
          scp -o StrictHostKeyChecking=no "./scripts/initialize-end.sh" root@${{ matrix.ip }}:/tmp/initialize-end.sh || {
            echo "[x] Failed to transfer after initialization script to remote server"
            exit 1
          }

      # Initialize the server with initialization script
      - name: Initialize BEFORE ${{ inputs.environment }} Server ${{ matrix.label }}
        run: |
          echo "[*] Executing BEFORE initializing remotely..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            chmod +x /tmp/initialize-begin.sh
            /tmp/initialize-begin.sh
          EOF
          echo "[*] Executing BEFORE initializing remotely...DONE"

      # Initialize the server with initialization script
      - name: Initialize ${{ inputs.environment }} Server ${{ matrix.label }}
        run: |
          echo "[*] Executing INTERNAL initializing remotely..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            echo "[*] Initializing server..."
            set -euo pipefail
            cd /

            configure_swarm() {
              local hostname
              hostname=$(hostname)
              echo "[*] Configuring Docker Swarm on $hostname..."

              #if docker info 2>/dev/null | grep -q "Swarm: active"; then
              if [ "$(docker info --format '{{.Swarm.LocalNodeState}}' 2>/dev/null)" = "active" ]; then
                echo "[*] Node already part of a Swarm. Skipping initialization/joining."
                if [[ "$hostname" == *"manager-1"* ]]; then
                  docker swarm join-token manager -q > /tmp/manager_token.txt
                  docker swarm join-token worker -q > /tmp/worker_token.txt
                fi
                return
              fi

              if [[ "$hostname" == *"manager-1"* ]]; then
                echo "[*] Initializing new Swarm cluster..."
                docker swarm init --advertise-addr ${{ matrix.private_ip }}

                mkdir -p /tmp
                chmod 1777 /tmp

                docker swarm join-token manager -q > /tmp/manager_token.txt
                docker swarm join-token worker -q > /tmp/worker_token.txt
                echo "[*] Saved manager and worker join tokens."
              else
                echo "[*] Joining existing Swarm cluster on ${{ matrix.manager_ip }}..."

                # SSH options for non-interactive CI (skip host key checking)
                SSH_OPTS="-o StrictHostKeyChecking=no -o ConnectTimeout=10"

                # Wait for manager token to appear (max ~60s)
                for i in {1..12}; do
                  if ssh $SSH_OPTS root@${{ matrix.manager_ip }} 'test -f /tmp/manager_token.txt && test -f /tmp/worker_token.txt'; then
                    echo "[*] Swarm tokens are available on ${{ matrix.manager_ip }}"
                    break
                  fi
                  echo "[!] Attempt $i: Waiting for Swarm tokens on ${{ matrix.manager_ip }}..."
                  sleep 5
                done

                # Final check before proceeding
                if ! ssh $SSH_OPTS root@${{ matrix.manager_ip }} 'test -f /tmp/manager_token.txt && test -f /tmp/worker_token.txt'; then
                  echo "[x] Timed out waiting for Swarm tokens. Exiting."
                  exit 1
                fi

                # Retrieve tokens
                MANAGER_JOIN_TOKEN=$(ssh $SSH_OPTS root@${{ matrix.manager_ip }} 'cat /tmp/manager_token.txt')
                WORKER_JOIN_TOKEN=$(ssh $SSH_OPTS root@${{ matrix.manager_ip }} 'cat /tmp/worker_token.txt')

                # Decide node role
                if [[ "$hostname" == *"manager-"* ]]; then
                  echo "[*] Joining as Swarm Manager..."
                  docker swarm join --token "$MANAGER_JOIN_TOKEN" ${{ matrix.manager_ip }}:2377 --advertise-addr ${{ matrix.private_ip }}
                else
                  echo "[*] Joining as Swarm Worker..."
                  docker swarm join --token "$WORKER_JOIN_TOKEN" ${{ matrix.manager_ip }}:2377 --advertise-addr ${{ matrix.private_ip }}
                fi

                echo "[*] Successfully joined Swarm cluster"

              fi
            }

            main() {
              configure_swarm
            }
            main
          EOF
          echo "[*] Executing INTERNAL initializing remotely...DONE"

      # Initialize the server with initialization script
      - name: Initialize AFTER ${{ inputs.environment }} Server ${{ matrix.label }}
        run: |
          echo "[*] Executing AFTER initializing remotely..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            chmod +x /tmp/initialize-end.sh
            /tmp/initialize-end.sh
          EOF
          echo "[*] Executing AFTER initializing remotely...DONE"

  # Configure the Swarm Cluster
  # This job will run if the cache is not hit or if the initialize input is set to true
  # Configures the Swarm cluster with the provided environment variables and secrets
  # Prepares the Swarm cluster for deployment
  configuration:
    name: Configure Swarm Cluster
    needs: [restore, initialization]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: always() 
    strategy:
      matrix: ${{ fromJson(needs.restore.outputs.matrix) }}
    steps:
      # Check out the repo
      - name: Check Out
        uses: actions/checkout@v4

      # Load environment variables from .env file
      - name: Get Environment Variables
        run: |
          echo "[*] Loading variables from ./src/${{ inputs.environment }}.env file..."
          while IFS='=' read -r key value || [ -n "$key" ]; do
            [[ -z "$key" || "$key" == \#* ]] && continue
            value="${value%\"}"
            value="${value#\"}"
            echo "$key=$value" >> "$GITHUB_ENV"
          done < ./src/${{ inputs.environment }}.env
          echo "[*] Loading variables from ./src/${{ inputs.environment }}.env file...DONE"

      # Set up GitHub Secrets
      - name: Get General Secrets
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            357068b9-9f5f-4f79-940c-b2c8016cb88f > KAMATERA_API_KEY
            6c9295a8-9fa4-4d38-8929-b2c8016d9b43 > KAMATERA_API_SECRET
            6cc5b975-56a9-4d7a-80c7-b2c90151cce0 > KAMATERA_PUBLIC_KEY
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY
            5083ae32-429d-428b-b7df-b2c901441bbb > KAMATERA_ROOT_PASSWORD
            5db70d74-c5db-459a-b916-b2d80126d8a3 > TRAEFIK_CLIENTID
            f5eaa406-b7cb-4ea8-b260-b2d80127303d > TRAEFIK_SECRET
            f53a76ab-b87f-4af0-9aa4-b2d1016aba2b > VERSIO_USERNAME
            3d7bbfcd-18a5-4762-9064-b2d1016aef63 > VERSIO_PASSWORD
            09171644-23c8-4b7f-9015-b2e5015a4572 > PLATFORM_USERNAME
            ffa5e6f9-de6a-47fa-887e-b2e5015ae1a4 > PLATFORM_PASSWORD

      # Set up GitHub Secrets for Test Environment
      - name: Get Test Secrets
        if: inputs.environment == 'test'
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            5083ae32-429d-428b-b7df-b2c901441bbb > APP_ROOT_PASSWORD

      # Set up GitHub Secrets for Staging Environment
      - name: Get Staging Secrets
        if: inputs.environment == 'staging'
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            924b9526-a6cf-43c1-93a9-b2c9014494ae > APP_ROOT_PASSWORD

      # Set up GitHub Secrets for Production Environment
      - name: Get Production Secrets
        if: inputs.environment == 'production'
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            6db5856c-3f7f-4b62-9846-b2c90144cb0b > APP_ROOT_PASSWORD

      # Set up SSH connection
      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "$KAMATERA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Configure Swarm Server
      - name: Configure Server
        run: |
          echo "[*] Copying variables to remote server..."

          # Generating secrets for remote server
          # Using printf to minimize the risk of variable expansion issues
          # cat <<EOF > /tmp/secrets.env
          # APP_ROOT_PASSWORD=$APP_ROOT_PASSWORD
          # VERSIO_USERNAME=$VERSIO_USERNAME
          # VERSIO_PASSWORD=$VERSIO_PASSWORD
          # TRAEFIK_CLIENTID=$TRAEFIK_CLIENTID
          # TRAEFIK_SECRET=$TRAEFIK_SECRET
          # PLATFORM_USERNAME=$PLATFORM_USERNAME
          # PLATFORM_PASSWORD=$PLATFORM_PASSWORD
          # EOF
          {
            printf "APP_ROOT_PASSWORD=%s\n" "$APP_ROOT_PASSWORD"
            printf "VERSIO_USERNAME=%s\n" "$VERSIO_USERNAME"
            printf "VERSIO_PASSWORD=%s\n" "$VERSIO_PASSWORD"
            printf "TRAEFIK_CLIENTID=%s\n" "$TRAEFIK_CLIENTID"
            printf "TRAEFIK_SECRET=%s\n" "$TRAEFIK_SECRET"
            printf "PLATFORM_USERNAME=%s\n" "$PLATFORM_USERNAME"
            printf "PLATFORM_PASSWORD=%s\n" "$PLATFORM_PASSWORD"
          } > /tmp/secrets.env

          # Copy secrets to remote server
          scp -o StrictHostKeyChecking=no /tmp/secrets.env root@${{ matrix.ip }}:/tmp/secrets.env || {
            echo "[x] Failed to transfer variables to remote server"
            exit 1
          }

          # Copy environment variables to remote server
          echo "[*] Copying environment variables to remote server..."
          scp -o StrictHostKeyChecking=no ./src/test.env root@${{ matrix.ip }}:/tmp/vars-test.env
          scp -o StrictHostKeyChecking=no ./src/staging.env root@${{ matrix.ip }}:/tmp/vars-staging.env
          scp -o StrictHostKeyChecking=no ./src/production.env root@${{ matrix.ip }}:/tmp/vars-production.env
          scp -o StrictHostKeyChecking=no ./src/shared.env root@${{ matrix.ip }}:/tmp/vars-shared.env
          scp -o StrictHostKeyChecking=no ./src/${{ inputs.environment }}.env root@${{ matrix.ip }}:/tmp/variables.env || {
            echo "[x] Failed to transfer variables to remote server"
            exit 1
          }

          # Copy the configuration scripts to the remote server
          echo "[*] Copying configuration script to remote server..."
          scp -o StrictHostKeyChecking=no "./scripts/configure-begin.sh" root@${{ matrix.ip }}:/tmp/configure-begin.sh || {
            echo "[x] Failed to transfer before configuration script to remote server"
            exit 1
          }
          scp -o StrictHostKeyChecking=no "./scripts/configure-end.sh" root@${{ matrix.ip }}:/tmp/configure-end.sh || {
            echo "[x] Failed to transfer after configuration script to remote server"
            exit 1
          }

          # Execute the configuration script remotely
          echo "[*] Executing configuration script remotely..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            chmod +x /tmp/configure-begin.sh
            /tmp/configure-begin.sh
            cp -f /tmp/variables.env /opt/app/.env
            cp -f /tmp/vars-test.env /opt/app/test.env
            cp -f /tmp/vars-staging.env /opt/app/staging.env
            cp -f /tmp/vars-production.env /opt/app/production.env
            cp -f /tmp/vars-shared.env /opt/app/shared.env
          EOF

          # Copy /src and /scripts to /opt/app
          echo "[*] Copying source to remote server..."
          scp -o StrictHostKeyChecking=no ./scripts/*.sh root@${{ matrix.ip }}:/opt/app

      # Configure Application Services
      - name: Configure App Services
        run: |
          set -e
          echo "[*] Configuring application services..."
          for script in ./src/*/configure.sh; do
            service=$(basename "$(dirname "$script")")
            echo "[*] Configuring service '$service'..."

            remote_conf_dir="/opt/app/$service/conf"
            remote_script="/opt/app/$service/conf/configure.sh"
            
            # Ensure remote conf directory exists
            ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} "mkdir -p '$remote_conf_dir'"

            # Copy service config files
            scp -o StrictHostKeyChecking=no ./src/$service/* root@${{ matrix.ip }}:"$remote_conf_dir/" || {
              echo "[x] Failed to transfer $service configuration to remote server"
              exit 1
            }
            
            # Run the config script remotely
            ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} \
              "chmod +x '$remote_script' && bash '$remote_script'" || {
                echo "[x] Configuration for $service failed"
                exit 1
              }

            echo "[V] Configured service '$service'"
          done
          echo "[*] Configuring application services...DONE"

      # Finish Configuration
      - name: Finish Configuration
        run: |
          echo "[*] Finishing configuration..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            chmod +x /tmp/configure-end.sh
            /tmp/configure-end.sh
          EOF
          echo "[*] Finishing configuration...DONE"

  # Get all metadata.json files and set them as a matrix
  # This job will run if the rebuild input is set to true
  # It will find all metadata.json files in the src directory and set them as a matrix
  # The matrix will be used to build and push the Docker images
  docker-matrix:
    name: Get Docker Matrix
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: inputs.rebuild == true
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Check out the repo
      - name: Check Out
        uses: actions/checkout@v4

      # Find all metadata.json files and set them as a matrix
      - name: Generate Matrix
        id: set-matrix
        run: |
          # Split the input list into an array
          IFS=',' read -ra SELECTED_SERVICES <<< "${{ inputs.services }}"
          # Function to check if an item is in the selected list
          function is_selected {
            local item="$1"
            for selected in "${SELECTED_SERVICES[@]}"; do
              if [[ "$selected" == "$item" ]]; then
                return 0
              fi
            done
            return 1
          }
          # Create the matrix filtered on services
          matrix='['
          for dir in ./src/*; do
            service=$(basename "$dir")
            json_file="$dir/metadata.json"
            dockerfile="$(jq -r .dockerfile "$json_file" 2>/dev/null)"
            # Only include services that are in the inputs.services (if provided)
            if [[ -f "$json_file" && -n "$dockerfile" && -f "$dir/$dockerfile" ]]; then
              if [[ -z "${{ inputs.services }}" ]] || is_selected "$service"; then
                json=$(cat "$json_file")
                merged=$(echo "$json" | jq --arg service "$service" '. + {service: $service}')
                matrix+="$merged,"
              fi
            fi
          done
          # Return the created matrix
          matrix="${matrix%,}]"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  # Build and Push Docker Images
  # This job will run if the rebuild input is set to true
  # It will build and push the Docker images for each service in the matrix
  docker-build:
    name: Build Docker Services
    needs: [docker-matrix]
    if: inputs.rebuild == true
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.docker-matrix.outputs.matrix) }}
    steps:
      # Check out the repo
      - name: Check Out
        uses: actions/checkout@v4

      # Set up GitHub Secrets
      - name: Get General Secrets
        id: get-secrets
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            9b5e0f00-d567-4357-a5fb-b2e30124e3fe > REGISTRY_USERNAME
            3bb3cf2a-6766-4715-8642-b2e301251ed1 > REGISTRY_PASSWORD
      
      # Set up .NET SDK
      - name: Setup .NET
        if: matrix.runtime == 'dotnet'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.run_version }} #8.0.x

      # Build .NET Project
      - name: Build .NET Project
        if: matrix.runtime == 'dotnet'
        run: |
          echo "Building .NET project for ${{ matrix.service }}"
          cd ./src/${{ matrix.service }}/
          if [[ ! -f "${{ matrix.projectfile }}" ]]; then
            echo "::error::Project file not found at ${{ matrix.projectfile }}"
            exit 1
          fi
          dotnet restore "${{ matrix.projectfile }}"
          dotnet build "${{ matrix.projectfile }}" --no-restore --configuration ${{ matrix.build_config }}
          dotnet test "${{ matrix.projectfile }}" --no-build --verbosity normal

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ steps.get-secrets.outputs.REGISTRY_USERNAME }}
          password: ${{ steps.get-secrets.outputs.REGISTRY_PASSWORD }}

      # Cache Docker layers
      # This step caches the Docker layers to speed up the build process
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # Extract metadata for docker
      # This step extracts metadata for the Docker image        
      - name: Extract metadata for docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.registry }}/${{ matrix.imagename }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=${{ matrix.imagename }}
            type=raw,value=${{ inputs.environment }}
      
      # Build and push docker image
      # This step builds and pushes the Docker image to the registry
      - name: Build and push docker image
        uses: docker/build-push-action@v6
        with:
          context: ./src/${{ matrix.service }}/${{ matrix.projectname }}
          file: ${{ matrix.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Start the Environment
  # This job will run only for the first manager node in the matrix
  start:
    name: Start Environment
    needs: [restore, configuration, docker-build]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    if: always()
    strategy:
      matrix: ${{ fromJson(needs.restore.outputs.matrix) }}
    steps:
      # Set up GitHub Secrets
      - name: Get General Secrets
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Environment
      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "$KAMATERA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Start the environment
      - name: Start Environment
        run: |
          if [[ "${{ matrix.name }}" != *"manager-1"* ]]; then
            echo "[*] Environments are only started on leader node."
            exit 0
          fi

          if [[ "${{ inputs.services}}" == "" ]]; then
            echo "[*] No services selected for startup."
            exit 0
          fi

          echo "[*] Starting Environment..."
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            cd /opt/app
            ./stop-stack.sh ${{ inputs.services }}
            sleep 30
            ./start-stack.sh ${{ inputs.services }}
          EOF
          echo "[*] Starting Environment...DONE"
