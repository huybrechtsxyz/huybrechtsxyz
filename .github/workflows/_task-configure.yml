# Configure docker swarm cluster
name: _ConfigureSwarmTask

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      BITWARDEN_TOKEN:
        required: true

jobs:
  download:
    name: Download Terraform Output
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      matrix: ${{ steps.parse.outputs.matrix }}
    steps:
      # Download Terraform Output
      - name: Download Terraform Output
        uses: actions/download-artifact@v4
        with:
          name: terraform-${{ inputs.environment }}-output
          path: ./tmp
      
      # Check if the artifact exists
      - name: Check if tf_output.json exists
        run: |
          if [ ! -f ./tmp/tf_output.json ]; then
            echo "Artifact terraform-${{ inputs.environment }}-output not found or tf_output.json missing. Exiting."
            exit 1
          fi

      # Parse Terraform Output to find Swarm Servers
      - name: Parse Swarm Servers
        id: parse
        run: |
          matrix=$(jq -c '.include' ./tmp/tf_output.json)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  configure:
    name: Configure Swarm Servers
    needs: [ download ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.download.outputs.matrix) }}
    steps:
      # Check out the repo
      - name: Check Out
        uses: actions/checkout@v4

      # Configure the server for the app
      - name: Configure Server
        run: |
          echo "Configuring IP: ${{ matrix.ip }}, Name: ${{ matrix.label }}"
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            # Function to create a path if it does not already exist
            function createpath() {
              local newpath="$1"
              if [ ! -d "$newpath" ]; then
                  mkdir -p "$newpath"
                  if [ $? -ne 0 ]; then
                  echo "Error: Failed to create directory '$newpath'"
                  return 1  # Return non-zero status to indicate failure
                  fi
                  #chmod 777 "$newpath"
                  sudo chmod -R 777 "$newpath"
              fi
              return 0  # Return zero status to indicate success
            }
            
            main() {
              # Start of scripts
              echo Updating server
              echo Creating application directories
              cd /
              createpath "/app"

              # Traefik
              createpath "/app/traefik"
              createpath "/app/traefik/conf"
              createpath "/app/traefik/data"
              createpath "/app/traefik/logs"
            }

            main
          EOF

      # Copy the generic files to the server
      - name: Copy Generic Files
        run: |
          main() {
            scp -o StrictHostKeyChecking=no /src/* root@${{ matrix.ip }}:/app/
          }

          main

      #
      - name: Copy Traefik Files
        run: |
          main() {
            scp -o StrictHostKeyChecking=no /src/traefik/* root@${{ matrix.ip }}:/app/traefik/conf

            # Generate main.tf from template
            cd /app/traefik/conf
            echo "Generating config from template"
            envsubst < traefik-config.template.yml > traefik-config.yml
            rm -f traefik-config.template.yml
            cat traefik-config.yml
          }

          main
