# Update Server Task
name: Update Server Task

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      MINIO_ROOT_USER:
        required: true
      MINIO_ROOT_PASSWORD:
        required: true
      MINIO_REGION:
        required: true
      VERSIO_USERNAME:
        required: true
      VERSIO_PASSWORD:
        required: true
      VERSIO_ENDPOINT:
        required: true
      APP_HOST_SERVER:
        required: true
      APP_HOST_PORT:
        required: true
      APP_HOST_USERNAME:
        required: true
      APP_HOST_PASSWORD:
        required: true

jobs:
  update-server:
    name: Update Server Task
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    - name: Update server script
      uses: appleboy/ssh-action@v1.0.2
      with:
        host: ${{ secrets.APP_HOST_SERVER }}
        username: ${{ secrets.APP_HOST_USERNAME }}
        password: ${{ secrets.APP_HOST_PASSWORD }}
        port: ${{ secrets.APP_HOST_PORT }}
        script: |
          cd /
          # Function to create a path if it does not already exist
          function createpath() {
          local newpath="$1"
          if [ ! -d "$newpath" ]; then
              mkdir -p "$newpath"
              if [ $? -ne 0 ]; then
              echo "Error: Failed to create directory '$newpath'"
              return 1  # Return non-zero status to indicate failure
              fi
              #chmod 777 "$newpath"
              sudo chmod -R 777 "$newpath"
          fi
          return 0  # Return zero status to indicate success
          }
          # Function to check if a Docker secret is in use
          function issecretinuse() {
          local secret_name="$1"
          # Check if any services are using the secret
          if docker service ls --format '{{.Name}}' | xargs -I {} docker service inspect {} --format '{{range .Spec.TaskTemplate.ContainerSpec.Secrets}}{{if eq .SecretName "'"$secret_name"'"}}{{.SecretName}}{{end}}{{end}}' | grep -q "$secret_name"; then
              return 0
          fi
          # Check if any containers are using the secret
          if docker ps --format '{{.Names}}' | xargs -I {} docker inspect {} --format '{{range .Mounts}}{{if eq .Type "secret"}}{{.Name}}{{end}}{{end}}' | grep -q "$secret_name"; then
              return 0
          fi
          return 1
          }
          # Function to create or update a Docker secret
          function createsecret() {
          local secret_label="$1"
          local secret_name="$2"
          local secret_value="$3"
          echo "Inspecting $secret_label"
          # Check if the secret already exists
          if docker secret inspect "$secret_name" &> /dev/null; then
              echo "$secret_label - Secret already exists"
              # Check if the secret is in use
              echo "Checking if $secret_label is in use"
              if issecretinuse "$secret_name"; then
              echo "$secret_label is in use by services or containers. Skipping deletion."
              return 0
              fi
              # Remove the old secret
              echo "Removing old $secret_label"
              docker secret rm "$secret_name"
          fi
          # Check if secret_name is not empty and create a new secret
          if [ -n "$secret_name" ]; then
              echo "Creating new $secret_label"
              echo "$secret_value" | docker secret create "$secret_name" -
          else
              echo "$secret_label - Not defined"
          fi
          }
          # Start of scripts
          echo Updating server
          echo Creating application directories
          cd /
          createpath "/app"
          createpath "/app/traefik"
          createpath "/app/traefik/cert"
          createpath "/app/traefik/logs"
          createpath "/app/consul"
          createpath "/app/consul/conf"
          createpath "/app/consul/data"
          createpath "/app/prometheus"
          createpath "/app/prometheus/conf"
          createpath "/app/prometheus/data"
          #Create the PUBLIC network on docker
          echo Public Network
          docker network inspect public --format {{.Id}} 2>/dev/null \
          || docker network create --driver overlay public
          #Create the PRIVATE network on docker
          echo Private Network
          docker network inspect private --format {{.Id}} 2>/dev/null \
          || docker network create --driver overlay private
          #Create the docker secrets
          createsecret "Minio Username" "MINIO_ROOT_USER" '${{ secrets.MINIO_ROOT_USER }}'
          createsecret "Minoi Password" "MINIO_ROOT_PASSWORD" '${{ secrets.MINIO_ROOT_PASSWORD }}'
          createsecret "Minio Region" "MINIO_REGION" '${{ secrets.MINIO_REGION }}'
          createsecret "Versio Username" "VERSIO_USERNAME" '${{ secrets.VERSIO_USERNAME }}'
          createsecret "Versio Password" "VERSIO_PASSWORD" '${{ secrets.VERSIO_PASSWORD }}'
          createsecret "Versio Endpoint" "VERSIO_ENDPOINT" '${{ secrets.VERSIO_ENDPOINT }}'
          createsecret "Server Server" "APP_HOST_SERVER" '${{ secrets.APP_HOST_SERVER }}'
          createsecret "Server Port" "APP_HOST_PORT" '${{ secrets.APP_HOST_PORT }}'
          createsecret "Server Username" "APP_HOST_USERNAME" '${{ secrets.APP_HOST_USERNAME }}'
          createsecret "Server Password" "APP_HOST_PASSWORD" '${{ secrets.APP_HOST_PASSWORD }}'
