# Run terraform 
name: _TerraformSwarmTask

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      APP_ROOT_PASSWORD:
        required: true
      KAMATERA_API_KEY:
        required: true
      KAMATERA_API_SECRET:
        required: true
      TF_API_SECRET:
        required: true

jobs:
  terraform:
    name: Terraform Tasks
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7   
      - name: Run Terraform
        env:
          APP_ROOT_PASSWORD: ${{ secrets.APP_ROOT_PASSWORD }}
          KAMATERA_API_KEY: ${{ secrets.KAMATERA_API_KEY }}
          KAMATERA_API_SECRET: ${{ secrets.KAMATERA_API_SECRET }}
          KAMATERA_ENVIRONMENT: ${{ inputs.environment }}
          TF_API_SECRET: ${{ secrets.TF_API_SECRET }}
        working-directory: ./deploy
        run: |
          # Set the Terraform environment variables
          export TF_VAR_api_key=$KAMATERA_API_KEY
          export TF_VAR_api_secret=$KAMATERA_API_SECRET
          export TF_VAR_environment=$KAMATERA_ENVIRONMENT
          export TF_VAR_password=$APP_ROOT_PASSWORD
          export TF_TOKEN_app_terraform_io=$TF_API_SECRET
          export ENVIRONMENT=${{ inputs.environment }}

          # Generate main.tf from template
          echo "Generating main.tf from template"
          envsubst < main.template.tf > main.tf
          rm -f main.template.tf
          cat main.tf

          # Initialize Terraform
          echo "Running terraform...INIT"
          terraform init

          # Select or create the workspace based on the environment input
          # echo "Running terraform...WORKSPACE"
          # terraform workspace select -or-create huybrechts-xyz-${{ inputs.environment }}
          # Initialize Terraform
          # echo "Running terraform...REINIT"
          # terraform init

          # Create the plan file
          # Terraform Cloud does not support saving the generated execution plan locally at this time.
          echo "Running terraform...PLAN"
          terraform plan -var-file="vars-${{ inputs.environment }}.tfvars" -input=false

          # Apply the plan file
          echo "Running terraform...APPLY"
          #terraform apply -auto-approve -var-file="vars-${{ inputs.environment }}.tfvars" -input=false
