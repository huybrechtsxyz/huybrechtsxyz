# Initialize docker swarm cluster
name: _InitializeSwarmTask

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      tf_output:
        required: true
        type: string
    secrets:
      BITWARDEN_TOKEN:
        required: true

jobs:
  configure:
    name: Configure Swarm Cluster
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    strategy:
      matrix: ${{ fromJson(inputs.tf_output) }}
    steps:
      # Set up GitHub Secrets for Test Environment
      - name: Get Test Secrets
        if: ${{ inputs.environment == 'test' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            f16fffe2-77b7-4d20-bf6c-b2c9015c71d3 > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Staging Environment
      - name: Get Staging Secrets
        if: ${{ inputs.environment == 'staging' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            0c1f1f1c-456b-47d5-aad4-b2c9015ca6dc > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Production Environment
      - name: Get Production Secrets
        if: ${{ inputs.environment == 'production' }}
        uses: bitwarden/sm-action@v2
        with:  
          access_token: ${{ secrets.BITWARDEN_TOKEN }}
          secrets: |
            02ed2dea7-b72e-401b-ae7e-b2c9015cd76e > KAMATERA_PRIVATE_KEY

      # Set up GitHub Secrets for Environments (trick to set the environment variables)
      - name: Set up SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "$KAMATERA_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Configure the server with initialization script
      - name: Configure ${{ inputs.environment }} Server ${{ matrix.label }}
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ matrix.ip }} << 'EOF'
            echo "Initializing server"
            set -euo pipefail

            cd /

            update_system() {
              echo "[*] Updating system packages..."
              apt-get update -y
              DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
            }

            configure_firewall() {
              echo "[*] Configuring firewall..."
              if ! command -v ufw &> /dev/null; then
                echo "[*] Installing UFW..."
                apt-get install -y ufw
              fi

              ufw --force reset
              ufw default deny incoming
              ufw default deny outgoing

              # Allow essential outgoing
              ufw allow out 53/tcp comment 'DNS'
              ufw allow out 123/udp comment 'NTP'

              # Allow SSH and web traffic
              ufw allow 22/tcp comment 'SSH'
              ufw allow 80/tcp comment 'HTTP'
              ufw allow 443/tcp comment 'HTTPS'

              ufw allow out 80/tcp comment 'HTTP'
              ufw allow out 443/tcp comment 'HTTPS'

              # Docker Swarm (private VLAN)
              ufw allow from 10.0.0.0/23 to any port 2377 proto tcp comment 'Docker Swarm Control'
              ufw allow from 10.0.0.0/23 to any port 7946 proto tcp comment 'Docker Overlay TCP'
              ufw allow from 10.0.0.0/23 to any port 7946 proto udp comment 'Docker Overlay UDP'
              ufw allow from 10.0.0.0/23 to any port 4789 proto udp comment 'Docker VXLAN Overlay'

              # Enable firewall only if not active
              if ! ufw status | grep -q "Status: active"; then
                echo "[*] Enabling UFW..."
                echo "y" | ufw enable
              fi

              ufw reload
              ufw status verbose
            }

            install_docker_if_needed() {
              if ! command -v docker &> /dev/null; then
                echo "[*] Installing Docker..."
                apt-get update
                apt-get install -y ca-certificates curl gnupg lsb-release
                curl -fsSL https://get.docker.com | bash
              else
                echo "[*] Docker is already installed."
              fi
            }

            configure_swarm() {
              local hostname
              hostname=$(hostname)
              echo "[*] Configuring Docker Swarm on $hostname..."

              #if docker info 2>/dev/null | grep -q "Swarm: active"; then
              if [ "$(docker info --format '{{.Swarm.LocalNodeState}}' 2>/dev/null)" = "active" ]; then
                echo "[*] Node already part of a Swarm. Skipping initialization/joining."
                docker swarm join-token manager -q > /tmp/manager_token.txt
                docker swarm join-token worker -q > /tmp/worker_token.txt
                return
              fi

              if [[ "$hostname" == *"manager-1"* ]]; then
                echo "[*] Initializing new Swarm cluster..."
                docker swarm init --advertise-addr ${{ matrix.private_ip }}

                mkdir -p /tmp
                chmod 1777 /tmp

                docker swarm join-token manager -q > /tmp/manager_token.txt
                docker swarm join-token worker -q > /tmp/worker_token.txt
                echo "[*] Saved manager and worker join tokens."
              else
                echo "[*] Joining existing Swarm cluster on ${{ matrix.manager_ip }}..."
                
                # Wait for manager-1 tokens to appear
                for i in {1..12}; do
                  if ssh root@${{ matrix.manager_ip }} 'test -f /tmp/manager_token.txt' >/dev/null 2>&1; then
                    break
                  fi
                  echo "Waiting for tokens on ${{ matrix.manager_ip }}..."
                  sleep 5
                done

                MANAGER_JOIN_TOKEN=$(ssh root@${{ matrix.manager_ip }} 'cat /tmp/manager_token.txt')
                WORKER_JOIN_TOKEN=$(ssh root@${{ matrix.manager_ip }} 'cat /tmp/worker_token.txt')

                if [[ "$hostname" == *"manager-"* ]]; then
                  echo "[*] Joining as Manager..."
                  docker swarm join --token "$MANAGER_JOIN_TOKEN" ${{ matrix.manager_ip }}:2377 --advertise-addr ${{ matrix.private_ip }}
                else
                  echo "[*] Joining as Worker..."
                  docker swarm join --token "$WORKER_JOIN_TOKEN" ${{ matrix.manager_ip }}:2377 --advertise-addr ${{ matrix.private_ip }}
                fi
                echo "[*] Joined Swarm cluster"
              fi
            }

            enable_docker_service() {
              echo "[*] Ensuring Docker is enabled and running..."
              systemctl enable docker
              systemctl restart docker
            }

            main() {
              update_system
              configure_firewall
              install_docker_if_needed
              configure_swarm
              enable_docker_service
            }

            main
          EOF
