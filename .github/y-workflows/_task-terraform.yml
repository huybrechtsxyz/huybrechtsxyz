# Initialize a Docker Swarm cluster using Terraform
name: _TerraformClusterTask

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      kamatera_api_key:
        required: true
        type: string
      kamatera_api_secret:
        required: true
        type: string
      kamatera_public_key:
        required: true
        type: string
      terraform_api_token:
        required: true
        type: string
      app_root_password:
        required: true
        type: string
    outputs:
      tf_output_json:
        description: "Full Terraform output JSON"
        value: ${{ jobs.terraform.outputs.tf_output_json }}

jobs:
  terraform:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      tf_output_json: ${{ steps.get.outputs.TF_OUTPUT }}
    steps:
      # Check out the repo
      - name: Check out the repo
        uses: actions/checkout@v4

      # Set up the Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Run Terraform to create docker swarm cluster
      - name: Run Terraform Apply
        working-directory: ./deploy
        run: |
          # Set the Terraform environment variables
          export TF_TOKEN_app_terraform_io=$TERRAFORM_API_TOKEN
          export TF_VAR_api_key=$KAMATERA_API_KEY
          export TF_VAR_api_secret=$KAMATERA_API_SECRET
          export TF_VAR_ssh_public_key=$KAMATERA_PUBLIC_KEY
          export TF_VAR_password=$APP_ROOT_PASSWORD
          export TF_VAR_environment=${{ inputs.environment }}
          export ENVIRONMENT=${{ inputs.environment }}

          # Generate main.tf from template
          echo "Generating main.tf from template"
          envsubst < main.template.tf > main.tf
          rm -f main.template.tf
          cat main.tf

          # Initialize Terraform
          echo "Running terraform...INIT"
          terraform init

          # Create the plan file
          # Terraform Cloud does not support saving the generated execution plan locally at this time.
          echo "Running terraform...PLAN"
          terraform plan -var-file="vars-${{ inputs.environment }}.tfvars" -input=false

          # Apply the plan file
          echo "Running terraform...APPLY"
          terraform apply -auto-approve -var-file="vars-${{ inputs.environment }}.tfvars" -input=false
          terraform output -json > tf_output.json

      # Get the Terraform output
      - name: Get Terraform output
        id: get
        run: |
          # Read the Terraform output and set it as an environment variable
          echo "Reading Terraform output..."
          cat tf_output.json
          # Set the output variable for GitHub Actions
          TF_OUTPUT=$(cat tf_output.json)
          echo "TF_OUTPUT=$TF_OUTPUT" >> $GITHUB_OUTPUT
